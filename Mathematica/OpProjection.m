BeginPackage["OpProjection`"];
ClearAll["OpProjection`*"];

bTOrthog[-1,-1,-1]={{{1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[-1,-1,0]={{{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}},{{1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}}};
bTOrthog[-1,-1,1]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,-2,0,0,0,0,0,0,0,0,0,0,0,1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[-1,0,-1]={{{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}},{{1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}}};
bTOrthog[-1,0,0]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Sqrt[2],-Sqrt[2],0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0}}};
bTOrthog[-1,0,1]={{{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}},{{1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}}};
bTOrthog[-1,1,-1]={{{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,1,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[-1,1,0]={{{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}},{{1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}}};
bTOrthog[-1,1,1]={{{1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[0,-1,-1]={{{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}},{{1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}}};
bTOrthog[0,-1,0]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,Sqrt[2]}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1}}};
bTOrthog[0,-1,1]={{{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}},{{1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}}};
bTOrthog[0,0,-1]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Sqrt[2],-Sqrt[2]}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1}}};
bTOrthog[0,0,0]={{{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}},{{1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1}},{{1,1,1,1,1,-2,-2,1,-2,-2,1,-2,1,1,-2,1,1,-2,-2,1,1,1,1,1,1,1,1,1,1,-2,-2,1,-2,-2,1,-2,1,1,-2,1,1,-2,-2,1,1,1,1,1},{-Sqrt[3],Sqrt[3],Sqrt[3],-Sqrt[3],-Sqrt[3],0,0,Sqrt[3],0,0,Sqrt[3],0,Sqrt[3],Sqrt[3],0,Sqrt[3],Sqrt[3],0,0,-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],Sqrt[3],Sqrt[3],-Sqrt[3],-Sqrt[3],0,0,Sqrt[3],0,0,Sqrt[3],0,Sqrt[3],Sqrt[3],0,Sqrt[3],Sqrt[3],0,0,-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3]}},{{-1+I,-1+I,1-I,1+I,1-I,-1-I,1-I,-1-I,1-I,1+I,1-I,-1+I,-1+I,1+I,-1-I,-1-I,1+I,1+I,-1+I,-1-I,-1+I,1-I,1+I,-1-I,-1+I,-1+I,1-I,1+I,1-I,-1-I,1-I,-1-I,1-I,1+I,1-I,-1+I,-1+I,1+I,-1-I,-1-I,1+I,1+I,-1+I,-1-I,-1+I,1-I,1+I,-1-I},{Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2]},{1+I,1+I,-1-I,-1+I,-1-I,1-I,-1-I,1-I,-1-I,-1+I,-1-I,1+I,1+I,-1+I,1-I,1-I,-1+I,-1+I,1+I,1-I,1+I,-1-I,-1+I,1-I,1+I,1+I,-1-I,-1+I,-1-I,1-I,-1-I,1-I,-1-I,-1+I,-1-I,1+I,1+I,-1+I,1-I,1-I,-1+I,-1+I,1+I,1-I,1+I,-1-I,-1+I,1-I}},{{1+I,-1-I,1+I,1+I,1-I,1+I,-1+I,-1-I,-1+I,-1-I,1-I,1-I,-1+I,1+I,1+I,-1+I,1-I,-1-I,1-I,-1-I,-1+I,-1-I,-1+I,1-I,1+I,-1-I,1+I,1+I,1-I,1+I,-1+I,-1-I,-1+I,-1-I,1-I,1-I,-1+I,1+I,1+I,-1+I,1-I,-1-I,1-I,-1-I,-1+I,-1-I,-1+I,1-I},{Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2]},{1-I,-1+I,1-I,1-I,1+I,1-I,-1-I,-1+I,-1-I,-1+I,1+I,1+I,-1-I,1-I,1-I,-1-I,1+I,-1+I,1+I,-1+I,-1-I,-1+I,-1-I,1+I,1-I,-1+I,1-I,1-I,1+I,1-I,-1-I,-1+I,-1-I,-1+I,1+I,1+I,-1-I,1-I,1-I,-1-I,1+I,-1+I,1+I,-1+I,-1-I,-1+I,-1-I,1+I}},{{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}},{{1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1,-1}},{{1,1,1,1,1,-2,-2,1,-2,-2,1,-2,1,1,-2,1,1,-2,-2,1,1,1,1,1,-1,-1,-1,-1,-1,2,2,-1,2,2,-1,2,-1,-1,2,-1,-1,2,2,-1,-1,-1,-1,-1},{-Sqrt[3],Sqrt[3],Sqrt[3],-Sqrt[3],-Sqrt[3],0,0,Sqrt[3],0,0,Sqrt[3],0,Sqrt[3],Sqrt[3],0,Sqrt[3],Sqrt[3],0,0,-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],-Sqrt[3],Sqrt[3],-Sqrt[3],-Sqrt[3],Sqrt[3],Sqrt[3],0,0,-Sqrt[3],0,0,-Sqrt[3],0,-Sqrt[3],-Sqrt[3],0,-Sqrt[3],-Sqrt[3],0,0,Sqrt[3],Sqrt[3],Sqrt[3],Sqrt[3],Sqrt[3]}},{{-1+I,-1+I,1-I,1+I,1-I,-1-I,1-I,-1-I,1-I,1+I,1-I,-1+I,-1+I,1+I,-1-I,-1-I,1+I,1+I,-1+I,-1-I,-1+I,1-I,1+I,-1-I,1-I,1-I,-1+I,-1-I,-1+I,1+I,-1+I,1+I,-1+I,-1-I,-1+I,1-I,1-I,-1-I,1+I,1+I,-1-I,-1-I,1-I,1+I,1-I,-1+I,-1-I,1+I},{Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2]},{1+I,1+I,-1-I,-1+I,-1-I,1-I,-1-I,1-I,-1-I,-1+I,-1-I,1+I,1+I,-1+I,1-I,1-I,-1+I,-1+I,1+I,1-I,1+I,-1-I,-1+I,1-I,-1-I,-1-I,1+I,1-I,1+I,-1+I,1+I,-1+I,1+I,1-I,1+I,-1-I,-1-I,1-I,-1+I,-1+I,1-I,1-I,-1-I,-1+I,-1-I,1+I,1-I,-1+I}},{{Sqrt[2],-Sqrt[2],Sqrt[2],Sqrt[2],-I Sqrt[2],Sqrt[2],I Sqrt[2],-Sqrt[2],I Sqrt[2],-Sqrt[2],-I Sqrt[2],-I Sqrt[2],I Sqrt[2],Sqrt[2],Sqrt[2],I Sqrt[2],-I Sqrt[2],-Sqrt[2],-I Sqrt[2],-Sqrt[2],I Sqrt[2],-Sqrt[2],I Sqrt[2],-I Sqrt[2],-Sqrt[2],Sqrt[2],-Sqrt[2],-Sqrt[2],I Sqrt[2],-Sqrt[2],-I Sqrt[2],Sqrt[2],-I Sqrt[2],Sqrt[2],I Sqrt[2],I Sqrt[2],-I Sqrt[2],-Sqrt[2],-Sqrt[2],-I Sqrt[2],I Sqrt[2],Sqrt[2],I Sqrt[2],Sqrt[2],-I Sqrt[2],Sqrt[2],-I Sqrt[2],I Sqrt[2]},{1-I,1-I,1-I,1-I,-1+I,1-I,-1+I,1-I,-1+I,1-I,-1+I,-1+I,-1+I,1-I,1-I,-1+I,-1+I,1-I,-1+I,1-I,-1+I,1-I,-1+I,-1+I,-1+I,-1+I,-1+I,-1+I,1-I,-1+I,1-I,-1+I,1-I,-1+I,1-I,1-I,1-I,-1+I,-1+I,1-I,1-I,-1+I,1-I,-1+I,1-I,-1+I,1-I,1-I},{-I Sqrt[2],I Sqrt[2],-I Sqrt[2],-I Sqrt[2],Sqrt[2],-I Sqrt[2],-Sqrt[2],I Sqrt[2],-Sqrt[2],I Sqrt[2],Sqrt[2],Sqrt[2],-Sqrt[2],-I Sqrt[2],-I Sqrt[2],-Sqrt[2],Sqrt[2],I Sqrt[2],Sqrt[2],I Sqrt[2],-Sqrt[2],I Sqrt[2],-Sqrt[2],Sqrt[2],I Sqrt[2],-I Sqrt[2],I Sqrt[2],I Sqrt[2],-Sqrt[2],I Sqrt[2],Sqrt[2],-I Sqrt[2],Sqrt[2],-I Sqrt[2],-Sqrt[2],-Sqrt[2],Sqrt[2],I Sqrt[2],I Sqrt[2],Sqrt[2],-Sqrt[2],-I Sqrt[2],-Sqrt[2],-I Sqrt[2],Sqrt[2],-I Sqrt[2],Sqrt[2],-Sqrt[2]}}};
bTOrthog[0,0,1]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Sqrt[2],-Sqrt[2]}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1}}};
bTOrthog[0,1,-1]={{{1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}},{{1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}}};
bTOrthog[0,1,0]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,Sqrt[2]}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1}}};
bTOrthog[0,1,1]={{{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{-1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}},{{1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1}}};
bTOrthog[1,-1,-1]={{{1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[1,-1,0]={{{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}},{{1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}}};
bTOrthog[1,-1,1]={{{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,1,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[1,0,-1]={{{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}},{{1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}}};
bTOrthog[1,0,0]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,I Sqrt[2],-I Sqrt[2],0,0,0,0,0,0,-I Sqrt[2],I Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-Sqrt[2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,Sqrt[2],-Sqrt[2],0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,1,0,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0}}};
bTOrthog[1,0,1]={{{1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}},{{-1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}},{{1,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0}}};
bTOrthog[1,1,-1]={{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,-2,0,0,0,0,0,0,0,0,0,0,0,1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};
bTOrthog[1,1,0]={{{1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}},{{-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}},{{1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0}}}; 
bTOrthog[1,1,1]={{{1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{-I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,-I Sqrt[3],0,0,0,I Sqrt[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,-2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}};

irrepSetOrthog[0,0,0]=
{{{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}},
{{{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}},
{{{1, 0}, {0, 1}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}},
{{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, I}, {0, -1, 0}, {-I, 0, 0}}, {{0, 0, -I}, {0, -1, 0}, {I, 0, 0}}, {{-1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], -1/2}}, {{-1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), -1/2}}, {{-I/2, (-I)/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {I/2, (-I)/Sqrt[2], I/2}}, {{I/2, -(1/Sqrt[2]), -I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {I/2, 1/Sqrt[2], -I/2}}, {{I/2, 1/Sqrt[2], -I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, I/Sqrt[2], -I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {I/2, I/Sqrt[2], I/2}}, {{-I/2, -(1/Sqrt[2]), I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, 1/Sqrt[2], I/2}}, {{I/2, I/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-I/2, I/Sqrt[2], -I/2}}, {{I/2, (-I)/Sqrt[2], I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, 1/Sqrt[2], I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), I/2}}, {{-I, 0, 0}, {0, 1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, 1, 0}, {0, 0, -I}}, {{1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), 1/2}}, {{1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], 1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, I}, {0, -1, 0}, {-I, 0, 0}}, {{0, 0, -I}, {0, -1, 0}, {I, 0, 0}}, {{-1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], -1/2}}, {{-1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), -1/2}}, {{-I/2, (-I)/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {I/2, (-I)/Sqrt[2], I/2}}, {{I/2, -(1/Sqrt[2]), -I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {I/2, 1/Sqrt[2], -I/2}}, {{I/2, 1/Sqrt[2], -I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, I/Sqrt[2], -I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {I/2, I/Sqrt[2], I/2}}, {{-I/2, -(1/Sqrt[2]), I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, 1/Sqrt[2], I/2}}, {{I/2, I/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-I/2, I/Sqrt[2], -I/2}}, {{I/2, (-I)/Sqrt[2], I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, 1/Sqrt[2], I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), I/2}}, {{-I, 0, 0}, {0, 1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, 1, 0}, {0, 0, -I}}, {{1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), 1/2}}, {{1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], 1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}},
{{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, -I}, {0, 1, 0}, {I, 0, 0}}, {{0, 0, I}, {0, 1, 0}, {-I, 0, 0}}, {{1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], 1/2}}, {{1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), 1/2}}, {{I/2, I/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, -(1/Sqrt[2]), -I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {I/2, -(1/Sqrt[2]), I/2}}, {{-I/2, 1/Sqrt[2], -I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, 1/Sqrt[2], I/2}}, {{I/2, (-I)/Sqrt[2], -I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {I/2, I/Sqrt[2], -I/2}}, {{I/2, -(1/Sqrt[2]), I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, (-I)/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-I/2, I/Sqrt[2], I/2}}, {{-I/2, I/Sqrt[2], I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-I/2, (-I)/Sqrt[2], I/2}}, {{I/2, 1/Sqrt[2], I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, 1/Sqrt[2], -I/2}}, {{-I, 0, 0}, {0, -1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, -1, 0}, {0, 0, -I}}, {{-1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), -1/2}}, {{-1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], -1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, -I}, {0, 1, 0}, {I, 0, 0}}, {{0, 0, I}, {0, 1, 0}, {-I, 0, 0}}, {{1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], 1/2}}, {{1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), 1/2}}, {{I/2, I/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, -(1/Sqrt[2]), -I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {I/2, -(1/Sqrt[2]), I/2}}, {{-I/2, 1/Sqrt[2], -I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, 1/Sqrt[2], I/2}}, {{I/2, (-I)/Sqrt[2], -I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {I/2, I/Sqrt[2], -I/2}}, {{I/2, -(1/Sqrt[2]), I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, (-I)/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-I/2, I/Sqrt[2], I/2}}, {{-I/2, I/Sqrt[2], I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-I/2, (-I)/Sqrt[2], I/2}}, {{I/2, 1/Sqrt[2], I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, 1/Sqrt[2], -I/2}}, {{-I, 0, 0}, {0, -1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, -1, 0}, {0, 0, -I}}, {{-1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), -1/2}}, {{-1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], -1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}},
{{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}},
{{{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}},
{{{1, 0}, {0, 1}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{-1/2, -Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1, 0}, {0, -1}}, {{1, 0}, {0, -1}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}, {{-1, 0}, {0, -1}}, {{-1, 0}, {0, 1}}, {{-1, 0}, {0, 1}}, {{1/2, Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1/2, Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{1/2, -Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{1/2, Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1/2, Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1/2, -Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{1/2, Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{1/2, -Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{1/2, -Sqrt[3]/2}, {Sqrt[3]/2, 1/2}}, {{1/2, Sqrt[3]/2}, {-Sqrt[3]/2, 1/2}}, {{-1, 0}, {0, 1}}, {{-1, 0}, {0, 1}}, {{1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{1/2, -Sqrt[3]/2}, {-Sqrt[3]/2, -1/2}}, {{1/2, Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{1/2, Sqrt[3]/2}, {Sqrt[3]/2, -1/2}}, {{-1, 0}, {0, -1}}, {{-1, 0}, {0, -1}}, {{-1, 0}, {0, -1}}},
{{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, I}, {0, -1, 0}, {-I, 0, 0}}, {{0, 0, -I}, {0, -1, 0}, {I, 0, 0}}, {{-1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], -1/2}}, {{-1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), -1/2}}, {{-I/2, (-I)/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {I/2, (-I)/Sqrt[2], I/2}}, {{I/2, -(1/Sqrt[2]), -I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {I/2, 1/Sqrt[2], -I/2}}, {{I/2, 1/Sqrt[2], -I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, I/Sqrt[2], -I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {I/2, I/Sqrt[2], I/2}}, {{-I/2, -(1/Sqrt[2]), I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, 1/Sqrt[2], I/2}}, {{I/2, I/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-I/2, I/Sqrt[2], -I/2}}, {{I/2, (-I)/Sqrt[2], I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, 1/Sqrt[2], I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), I/2}}, {{-I, 0, 0}, {0, 1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, 1, 0}, {0, 0, -I}}, {{1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), 1/2}}, {{1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], 1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}, {{-1, 0, 0}, {0, -1, 0}, {0, 0, -1}}, {{0, 0, -I}, {0, 1, 0}, {I, 0, 0}}, {{0, 0, I}, {0, 1, 0}, {-I, 0, 0}}, {{1/2, (-I)/Sqrt[2], -1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], 1/2}}, {{1/2, I/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, I/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], 1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {1/2, -(1/Sqrt[2]), 1/2}}, {{1/2, -(1/Sqrt[2]), 1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {1/2, 1/Sqrt[2], 1/2}}, {{I/2, I/Sqrt[2], I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-I/2, I/Sqrt[2], -I/2}}, {{-I/2, 1/Sqrt[2], I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), I/2}}, {{-I/2, -(1/Sqrt[2]), I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, 1/Sqrt[2], I/2}}, {{I/2, (-I)/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-I/2, (-I)/Sqrt[2], -I/2}}, {{I/2, 1/Sqrt[2], -I/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, (-I)/Sqrt[2], -I/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {I/2, (-I)/Sqrt[2], I/2}}, {{-I/2, I/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {I/2, I/Sqrt[2], I/2}}, {{I/2, -(1/Sqrt[2]), -I/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, 1/Sqrt[2], -I/2}}, {{I, 0, 0}, {0, -1, 0}, {0, 0, -I}}, {{-I, 0, 0}, {0, -1, 0}, {0, 0, I}}, {{-1/2, 1/Sqrt[2], -1/2}, {-(1/Sqrt[2]), 0, 1/Sqrt[2]}, {-1/2, -(1/Sqrt[2]), -1/2}}, {{-1/2, -(1/Sqrt[2]), -1/2}, {1/Sqrt[2], 0, -(1/Sqrt[2])}, {-1/2, 1/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, I/Sqrt[2], 1/2}, {I/Sqrt[2], 0, I/Sqrt[2]}, {1/2, I/Sqrt[2], -1/2}}, {{1, 0, 0}, {0, -1, 0}, {0, 0, 1}}, {{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}}, {{0, 0, 1}, {0, 1, 0}, {1, 0, 0}}},
{{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{0, 0, -I}, {0, 1, 0}, {I, 0, 0}}, {{0, 0, I}, {0, 1, 0}, {-I, 0, 0}}, {{1/2, I/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {1/2, (-I)/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], 1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, I/Sqrt[2], 1/2}}, {{1/2, 1/Sqrt[2], -1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-1/2, 1/Sqrt[2], 1/2}}, {{1/2, -(1/Sqrt[2]), -1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-1/2, -(1/Sqrt[2]), 1/2}}, {{I/2, I/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {I/2, (-I)/Sqrt[2], -I/2}}, {{-I/2, -(1/Sqrt[2]), -I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {I/2, -(1/Sqrt[2]), I/2}}, {{-I/2, 1/Sqrt[2], -I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, 1/Sqrt[2], I/2}}, {{I/2, (-I)/Sqrt[2], -I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {I/2, I/Sqrt[2], -I/2}}, {{I/2, -(1/Sqrt[2]), I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, (-I)/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-I/2, I/Sqrt[2], I/2}}, {{-I/2, I/Sqrt[2], I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-I/2, (-I)/Sqrt[2], I/2}}, {{I/2, 1/Sqrt[2], I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, 1/Sqrt[2], -I/2}}, {{-I, 0, 0}, {0, -1, 0}, {0, 0, I}}, {{I, 0, 0}, {0, -1, 0}, {0, 0, -I}}, {{-1/2, 1/Sqrt[2], 1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {1/2, 1/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), 1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {1/2, -(1/Sqrt[2]), -1/2}}, {{-1/2, I/Sqrt[2], -1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, (-I)/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, I/Sqrt[2], -1/2}}, {{-1, 0, 0}, {0, 1, 0}, {0, 0, -1}}, {{0, 0, -1}, {0, -1, 0}, {-1, 0, 0}}, {{0, 0, 1}, {0, -1, 0}, {1, 0, 0}}, {{-1, 0, 0}, {0, -1, 0}, {0, 0, -1}}, {{0, 0, I}, {0, -1, 0}, {-I, 0, 0}}, {{0, 0, -I}, {0, -1, 0}, {I, 0, 0}}, {{-1/2, (-I)/Sqrt[2], -1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-1/2, I/Sqrt[2], -1/2}}, {{-1/2, I/Sqrt[2], -1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-1/2, (-I)/Sqrt[2], -1/2}}, {{-1/2, -(1/Sqrt[2]), 1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {1/2, -(1/Sqrt[2]), -1/2}}, {{-1/2, 1/Sqrt[2], 1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {1/2, 1/Sqrt[2], -1/2}}, {{-I/2, (-I)/Sqrt[2], I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-I/2, I/Sqrt[2], I/2}}, {{I/2, 1/Sqrt[2], I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {-I/2, 1/Sqrt[2], -I/2}}, {{I/2, -(1/Sqrt[2]), I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {-I/2, -(1/Sqrt[2]), -I/2}}, {{-I/2, I/Sqrt[2], I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-I/2, (-I)/Sqrt[2], I/2}}, {{-I/2, 1/Sqrt[2], -I/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {I/2, 1/Sqrt[2], I/2}}, {{I/2, I/Sqrt[2], -I/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {I/2, (-I)/Sqrt[2], -I/2}}, {{I/2, (-I)/Sqrt[2], -I/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {I/2, I/Sqrt[2], -I/2}}, {{-I/2, -(1/Sqrt[2]), -I/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {I/2, -(1/Sqrt[2]), I/2}}, {{I, 0, 0}, {0, 1, 0}, {0, 0, -I}}, {{-I, 0, 0}, {0, 1, 0}, {0, 0, I}}, {{1/2, -(1/Sqrt[2]), -1/2}, {1/Sqrt[2], 0, 1/Sqrt[2]}, {-1/2, -(1/Sqrt[2]), 1/2}}, {{1/2, 1/Sqrt[2], -1/2}, {-(1/Sqrt[2]), 0, -(1/Sqrt[2])}, {-1/2, 1/Sqrt[2], 1/2}}, {{1/2, (-I)/Sqrt[2], 1/2}, {(-I)/Sqrt[2], 0, I/Sqrt[2]}, {1/2, I/Sqrt[2], 1/2}}, {{1/2, I/Sqrt[2], 1/2}, {I/Sqrt[2], 0, (-I)/Sqrt[2]}, {1/2, (-I)/Sqrt[2], 1/2}}, {{1, 0, 0}, {0, -1, 0}, {0, 0, 1}}, {{0, 0, 1}, {0, 1, 0}, {1, 0, 0}}, {{0, 0, -1}, {0, 1, 0}, {-1, 0, 0}}}};
irrepSetOrthog[0,0,1]=
{{{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}},
{{{1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}, {{-1}}},
{{{1, 0}, {0, 1}}, {{0, I}, {I, 0}}, {{0, -I}, {-I, 0}}, {{-1, 0}, {0, -1}}, {{0, -I}, {I, 0}}, {{0, I}, {-I, 0}}, {{-1, 0}, {0, 1}}, {{1, 0}, {0, -1}}},
{{{1}}, {{-1}}, {{-1}}, {{1}}, {{-1}}, {{-1}}, {{1}}, {{1}}},
{{{1}}, {{-1}}, {{-1}}, {{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}}};
irrepSetOrthog[0,1,1]=
{{{{1}}, {{1}}, {{1}}, {{1}}},
{{{1}}, {{1}}, {{-1}}, {{-1}}},
{{{1}}, {{-1}}, {{-1}}, {{1}}},
{{{1}}, {{-1}}, {{1}}, {{-1}}}};
irrepSetOrthog[1,1,1]=
{{{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}},
{{{1}}, {{1}}, {{1}}, {{-1}}, {{-1}}, {{-1}}},
{{{1, 0}, {0, 1}}, {{-1/2, (I/2)*Sqrt[3]}, {(I/2)*Sqrt[3], -1/2}}, {{-1/2, (-I/2)*Sqrt[3]}, {(-I/2)*Sqrt[3], -1/2}}, {{1/2, (-I/2)*Sqrt[3]}, {(I/2)*Sqrt[3], -1/2}}, {{1/2, (I/2)*Sqrt[3]}, {(-I/2)*Sqrt[3], -1/2}}, {{-1, 0}, {0, 1}}}};
irrepSetOrthog[px_,py_,pz_] := Module[{Pxsort,Pysort,Pzsort},{Pxsort,Pysort,Pzsort}=Sort[{px,py,pz}//Abs];irrepSetOrthog[px,py,pz]=irrepSetOrthog[Pxsort,Pysort,Pzsort];irrepSetOrthog[px,py,pz]];


Ord[0,0,0]=48
Ord[0,0,1]=8
Ord[0,1,1]=4
Ord[1,1,1]=6
Ord[px_,py_,pz_] := Module[{Pxsort,Pysort,Pzsort},
  {Pxsort,Pysort,Pzsort}=Sort[{px,py,pz}//Abs];
  Ord[px,py,pz]=Ord[Pxsort,Pysort,Pzsort];
  Ord[px,py,pz]];

permutationTable = {{ax -> bx, ay -> by, az -> bz},{ax -> by, ay -> bx, az -> -bz},{ax -> -by, ay -> -bx, az -> -bz},{ax -> -bx, ay -> bz, az -> by},{ax -> -bx, ay -> -bz, az -> -by},{ax -> bz, ay -> -by, az -> bx},{ax -> -bz, ay -> -by, az -> -bx},{ax -> -by, ay -> -bz, az -> bx},{ax -> bz, ay -> -bx, az -> -by},{ax -> -bz, ay -> -bx, az -> by},{ax -> -by, ay -> bz, az -> -bx},{ax -> bz, ay -> bx, az -> by},{ax -> by, ay -> bz, az -> bx},{ax -> by, ay -> -bz, az -> -bx},{ax -> -bz, ay -> bx, az -> -by},{ax -> -by, ay -> bx, az -> bz},{ax -> by, ay -> -bx, az -> bz},{ax -> bz, ay -> by, az -> -bx},{ax -> -bz, ay -> by, az -> bx},{ax -> bx, ay -> bz, az -> -by},{ax -> bx, ay -> -bz, az -> by},{ax -> -bx, ay -> -by, az -> bz},{ax -> -bx, ay -> by, az -> -bz},{ax -> bx, ay -> -by, az -> -bz},{ax -> -bx, ay -> -by, az -> -bz},{ax -> -by, ay -> -bx, az -> bz},{ax -> by, ay -> bx, az -> bz},{ax -> bx, ay -> -bz, az -> -by},{ax -> bx, ay -> bz, az -> by},{ax -> -bz, ay -> by, az -> -bx},{ax -> bz, ay -> by, az -> bx},{ax -> by, ay -> bz, az -> -bx},{ax -> -bz, ay -> bx, az -> by},{ax -> bz, ay -> bx, az -> -by},{ax -> by, ay -> -bz, az -> bx},{ax -> -bz, ay -> -bx, az -> -by},{ax -> -by, ay -> -bz, az -> -bx},{ax -> -by, ay -> bz, az -> bx},{ax -> bz, ay -> -bx, az -> by},{ax -> by, ay -> -bx, az -> -bz},{ax -> -by, ay -> bx, az -> -bz},{ax -> -bz, ay -> -by, az -> bx},{ax -> bz, ay -> -by, az -> -bx},{ax -> -bx, ay -> -bz, az -> by},{ax -> -bx, ay -> bz, az -> -by},{ax -> bx, ay -> by, az -> -bz},{ax -> bx, ay -> -by, az -> bz},{ax -> -bx, ay -> by, az -> bz}};
inversepermutationTable = {{ax -> bx, ay -> by, az -> bz},
  {ay -> bx, ax -> by, az -> -bz},
  {ay -> -bx, ax -> -by, az -> -bz},
  {ax -> -bx, az -> by, ay -> bz},
  {ax -> -bx, az -> -by, ay -> -bz},
  {az -> bx, ay -> -by, ax -> bz},
  {az -> -bx, ay -> -by, ax -> -bz},
  {ay -> -bx, az -> -by, ax -> bz},
  {az -> bx, ax -> -by, ay -> -bz},
  {az -> -bx, ax -> -by, ay -> bz},
  {ay -> -bx, az -> by, ax -> -bz},
  {az -> bx, ax -> by, ay -> bz},
  {ay -> bx, az -> by, ax -> bz},
  {ay -> bx, az -> -by, ax -> -bz},
  {az -> -bx, ax -> by, ay -> -bz},
  {ay -> -bx, ax -> by, az -> bz},
  {ay -> bx, ax -> -by, az -> bz},
  {az -> bx, ay -> by, ax -> -bz},
  {az -> -bx, ay -> by, ax -> bz},
  {ax -> bx, az -> by, ay -> -bz},
  {ax -> bx, az -> -by, ay -> bz},
  {ax -> -bx, ay -> -by, az -> bz},
  {ax -> -bx, ay -> by, az -> -bz},
  {ax -> bx, ay -> -by, az -> -bz},
  {ax -> -bx, ay -> -by, az -> -bz},
  {ay -> -bx, ax -> -by, az -> bz},
  {ay -> bx, ax -> by, az -> bz},
  {ax -> bx, az -> -by, ay -> -bz},
  {ax -> bx, az -> by, ay -> bz},
  {az -> -bx, ay -> by, ax -> -bz},
  {az -> bx, ay -> by, ax -> bz},
  {ay -> bx, az -> by, ax -> -bz},
  {az -> -bx, ax -> by, ay -> bz},
  {az -> bx, ax -> by, ay -> -bz},
  {ay -> bx, az -> -by, ax -> bz},
  {az -> -bx, ax -> -by, ay -> -bz},
  {ay -> -bx, az -> -by, ax -> -bz},
  {ay -> -bx, az -> by, ax -> bz},
  {az -> bx, ax -> -by, ay -> bz},
  {ay -> bx, ax -> -by, az -> -bz},
  {ay -> -bx, ax -> by, az -> -bz},
  {az -> -bx, ay -> -by, ax -> bz},
  {az -> bx, ay -> -by, ax -> -bz},
  {ax -> -bx, az -> -by, ay -> bz},
  {ax -> -bx, az -> by, ay -> -bz},
  {ax -> bx, ay -> by, az -> -bz},
  {ax -> bx, ay -> -by, az -> bz},
  {ax -> -bx, ay -> by, az -> bz}};


permTab[-1,-1,-1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->bx,az->by},{ax->by,ay->bz,az->bx},{ax->by,ay->bx,az->bz},{ax->bx,ay->bz,az->by},{ax->bz,ay->by,az->bx}}
permTab[-1,-1,0]={{ax->bx,ay->by,az->bz},{ax->by,ay->bx,az->-bz},{ax->by,ay->bx,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[-1,-1,1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->bx,az->-by},{ax->by,ay->-bz,az->-bx},{ax->by,ay->bx,az->bz},{ax->bx,ay->-bz,az->-by},{ax->-bz,ay->by,az->-bx}}
permTab[-1,0,-1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->-by,az->bx},{ax->bz,ay->by,az->bx},{ax->bx,ay->-by,az->bz}}
permTab[-1,0,0]={{ax->bx,ay->by,az->bz},{ax->bx,ay->bz,az->-by},{ax->bx,ay->-bz,az->by},{ax->bx,ay->-by,az->-bz},{ax->bx,ay->bz,az->by},{ax->bx,ay->-bz,az->-by},{ax->bx,ay->by,az->-bz},{ax->bx,ay->-by,az->bz}}
permTab[-1,0,1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->-by,az->-bx},{ax->-bz,ay->by,az->-bx},{ax->bx,ay->-by,az->bz}}
permTab[-1,1,-1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->-bx,az->-by},{ax->-by,ay->-bz,az->bx},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->-bz,az->-by},{ax->bz,ay->by,az->bx}}
permTab[-1,1,0]={{ax->bx,ay->by,az->bz},{ax->-by,ay->-bx,az->-bz},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[-1,1,1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->-bx,az->by},{ax->-by,ay->bz,az->-bx},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->bz,az->by},{ax->-bz,ay->by,az->-bx}}
permTab[0,-1,-1]={{ax->bx,ay->by,az->bz},{ax->-bx,ay->bz,az->by},{ax->bx,ay->bz,az->by},{ax->-bx,ay->by,az->bz}}
permTab[0,-1,0]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->by,az->bx},{ax->bz,ay->by,az->-bx},{ax->-bx,ay->by,az->-bz},{ax->bz,ay->by,az->bx},{ax->-bz,ay->by,az->-bx},{ax->-bx,ay->by,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[0,-1,1]={{ax->bx,ay->by,az->bz},{ax->-bx,ay->-bz,az->-by},{ax->bx,ay->-bz,az->-by},{ax->-bx,ay->by,az->bz}}
permTab[0,0,-1]={{ax->bx,ay->by,az->bz},{ax->by,ay->-bx,az->bz},{ax->-by,ay->bx,az->bz},{ax->-bx,ay->-by,az->bz},{ax->by,ay->bx,az->bz},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->-by,az->bz},{ax->-bx,ay->by,az->bz}}
permTab[0,0,0]={{ax->bx,ay->by,az->bz},{ax->by,ay->bx,az->-bz},{ax->-by,ay->-bx,az->-bz},{ax->-bx,ay->bz,az->by},{ax->-bx,ay->-bz,az->-by},{ax->bz,ay->-by,az->bx},{ax->-bz,ay->-by,az->-bx},{ax->-by,ay->-bz,az->bx},{ax->bz,ay->-bx,az->-by},{ax->-bz,ay->-bx,az->by},{ax->-by,ay->bz,az->-bx},{ax->bz,ay->bx,az->by},{ax->by,ay->bz,az->bx},{ax->by,ay->-bz,az->-bx},{ax->-bz,ay->bx,az->-by},{ax->-by,ay->bx,az->bz},{ax->by,ay->-bx,az->bz},{ax->bz,ay->by,az->-bx},{ax->-bz,ay->by,az->bx},{ax->bx,ay->bz,az->-by},{ax->bx,ay->-bz,az->by},{ax->-bx,ay->-by,az->bz},{ax->-bx,ay->by,az->-bz},{ax->bx,ay->-by,az->-bz},{ax->-bx,ay->-by,az->-bz},{ax->-by,ay->-bx,az->bz},{ax->by,ay->bx,az->bz},{ax->bx,ay->-bz,az->-by},{ax->bx,ay->bz,az->by},{ax->-bz,ay->by,az->-bx},{ax->bz,ay->by,az->bx},{ax->by,ay->bz,az->-bx},{ax->-bz,ay->bx,az->by},{ax->bz,ay->bx,az->-by},{ax->by,ay->-bz,az->bx},{ax->-bz,ay->-bx,az->-by},{ax->-by,ay->-bz,az->-bx},{ax->-by,ay->bz,az->bx},{ax->bz,ay->-bx,az->by},{ax->by,ay->-bx,az->-bz},{ax->-by,ay->bx,az->-bz},{ax->-bz,ay->-by,az->bx},{ax->bz,ay->-by,az->-bx},{ax->-bx,ay->-bz,az->by},{ax->-bx,ay->bz,az->-by},{ax->bx,ay->by,az->-bz},{ax->bx,ay->-by,az->bz},{ax->-bx,ay->by,az->bz}}
permTab[0,0,1]={{ax->bx,ay->by,az->bz},{ax->-by,ay->bx,az->bz},{ax->by,ay->-bx,az->bz},{ax->-bx,ay->-by,az->bz},{ax->-by,ay->-bx,az->bz},{ax->by,ay->bx,az->bz},{ax->bx,ay->-by,az->bz},{ax->-bx,ay->by,az->bz}}
permTab[0,1,-1]={{ax->bx,ay->by,az->bz},{ax->-bx,ay->-bz,az->-by},{ax->bx,ay->-bz,az->-by},{ax->-bx,ay->by,az->bz}}
permTab[0,1,0]={{ax->bx,ay->by,az->bz},{ax->bz,ay->by,az->-bx},{ax->-bz,ay->by,az->bx},{ax->-bx,ay->by,az->-bz},{ax->-bz,ay->by,az->-bx},{ax->bz,ay->by,az->bx},{ax->-bx,ay->by,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[0,1,1]={{ax->bx,ay->by,az->bz},{ax->-bx,ay->bz,az->by},{ax->bx,ay->bz,az->by},{ax->-bx,ay->by,az->bz}}
permTab[1,-1,-1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->-bx,az->by},{ax->-by,ay->bz,az->-bx},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->bz,az->by},{ax->-bz,ay->by,az->-bx}}
permTab[1,-1,0]={{ax->bx,ay->by,az->bz},{ax->-by,ay->-bx,az->-bz},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[1,-1,1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->-bx,az->-by},{ax->-by,ay->-bz,az->bx},{ax->-by,ay->-bx,az->bz},{ax->bx,ay->-bz,az->-by},{ax->bz,ay->by,az->bx}}
permTab[1,0,-1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->-by,az->-bx},{ax->-bz,ay->by,az->-bx},{ax->bx,ay->-by,az->bz}}
permTab[1,0,0]={{ax->bx,ay->by,az->bz},{ax->bx,ay->-bz,az->by},{ax->bx,ay->bz,az->-by},{ax->bx,ay->-by,az->-bz},{ax->bx,ay->-bz,az->-by},{ax->bx,ay->bz,az->by},{ax->bx,ay->by,az->-bz},{ax->bx,ay->-by,az->bz}}
permTab[1,0,1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->-by,az->bx},{ax->bz,ay->by,az->bx},{ax->bx,ay->-by,az->bz}}
permTab[1,1,-1]={{ax->bx,ay->by,az->bz},{ax->-bz,ay->bx,az->-by},{ax->by,ay->-bz,az->-bx},{ax->by,ay->bx,az->bz},{ax->bx,ay->-bz,az->-by},{ax->-bz,ay->by,az->-bx}}
permTab[1,1,0]={{ax->bx,ay->by,az->bz},{ax->by,ay->bx,az->-bz},{ax->by,ay->bx,az->bz},{ax->bx,ay->by,az->-bz}}
permTab[1,1,1]={{ax->bx,ay->by,az->bz},{ax->bz,ay->bx,az->by},{ax->by,ay->bz,az->bx},{ax->by,ay->bx,az->bz},{ax->bx,ay->bz,az->by},{ax->bz,ay->by,az->bx}}

btoa = {bx -> ax, by -> ay, bz -> az};

IrrepName[0,0,0] = {A1plusOhP, A2plusOhP, EplusOhP, T1plusOhP, T2plusOhP, 
    A1minusOhP, A2minusOhP, EminusOhP, T1minusOhP, 
    T2minusOhP};
IrrepName[0,0,1] = {A1Dic4, A2Dic4, E2Dic4, B1Dic4, B2Dic4};
IrrepName[0,1,1] = {A1Dic2, A2Dic2, B1Dic2, B2Dic2};
IrrepName[1,1,1] = {A1Dic3, A2Dic3, EEDic3};
IrrepName[px_,py_,pz_] := Module[{Pxsort,Pysort,Pzsort},
  {Pxsort,Pysort,Pzsort}=Sort[{px,py,pz}//Abs];
  IrrepName[px,py,pz]=IrrepName[Pxsort,Pysort,Pzsort];
  IrrepName[px,py,pz]];


dir[ax]=1;
dir[-ax]=1;
dir[ay]=2;
dir[-ay]=2;
dir[az]=3;
dir[-az]=3;
posdir[ax]=True;
posdir[ay]=True;
posdir[az]=True;
posdir[-ax]=False;
posdir[-ay]=False;
posdir[-az]=False;
p[-2]=m2;
p[-1]=m1;
p[0]=0;
p[1]=1;
p[2]=2;

OpConstidx=0;
opfilename = "../LibHR/Observables/glueballs_op.c";
headerfilename = "../Include/glueballs.h";
checkfunctionsfilename="../TestProgram/Utils/check_utils_3_functions.c";

MyRangeString[min_, max_] := Module[{string = ""},
   Do[string = string <> " " <> ToString[i], {i, min, max}];
   string];

FromPathtoCindex[px_, py_, pz_, irrepidx_, irrepev_, charge_, path_] := 
 MapOptoCindex[px, py, pz, irrepidx, charge, Opindex[px, py, pz, irrepidx, charge]
  [[Opindex[px, py, pz, irrepidx, charge, PathUniqueIndex[path]], irrepev]]];

Add2trOpCorrelators[path1_,px1_, py1_, pz1_, irrepidx1_,charge1_, path2_,px2_, py2_, pz2_, irrepidx2_, charge2_,pxout_, pyout_, pzout_, irrepidxout_, irrepevout_]:= Module[{res,success=0,CG,irname1,irname2,irnameout,cg,lridx1,lridx2,lchg1,lchg2,lpath1,lpath2,lres,cg1,i,cc,lpx1,lpy1,lpz1,lpx2,lpy2,lpz2,lev1,lev2,charge=charge1*charge2,tmp,res1,res2,oo},
  If[Not[ListQ[bTOrthog[px1, py1, pz1]]] || Not[ListQ[bTOrthog[px2, py2, pz2]]] || Not[ListQ[bTOrthog[pxout, pyout, pzout]]],    Print["Missing Coefficient table for the given impulse"];Abort[];];
  If[Length[bTOrthog[px1, py1, pz1]] < irrepidx1 || irrepidx1 < 1 , Print["Number of irreps is not compatible with the requested irrep index"];Abort[];];
  If[Length[bTOrthog[px2, py2, pz2]] < irrepidx2 || irrepidx2 < 1 , Print["Number of irreps is not compatible with the requested irrep index"];Abort[];];
  If[Length[bTOrthog[pxout, pyout, pzout]] < irrepidxout || irrepidxout < 1 , Print["Number of irreps is not compatible with the requested irrep index"];Abort[];];
  If[Length[bTOrthog[pxout, pyout, pzout][[irrepidxout]]] < irrepevout || irrepevout < 1,  Print["Irrep dimension is not compatible with the requested irrep ev"];Abort[];];
  If[Not[Or[charge1==-1, charge1==+1]],Print["Charge can only take values +1 or -1"];Abort[];];
  If[Not[Or[charge2==-1, charge2==+1]],Print["Charge can only take values +1 or -1"];Abort[];];
  {psx1, psy1, psz1}=Sort[{px1, py1, pz1} // Abs];
  {psx2, psy2, psz2}=Sort[{px2, py2, pz2} // Abs];
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},A1plusOhP,1]={{1/Sqrt[6],{{0,0,1},1},{{0,0,-1},1}},{1/Sqrt[6],{{0,0,-1},1},{{0,0,1},1}},{1/Sqrt[6],{{0,1,0},1},{{0,-1,0},1}},{1/Sqrt[6],{{0,-1,0},1},{{0,1,0},1}},{1/Sqrt[6],{{1,0,0},1},{{-1,0,0},1}},{1/Sqrt[6],{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},EplusOhP,1]={{1/Sqrt[3],{{0,0,1},1},{{0,0,-1},1}},{1/Sqrt[3],{{0,0,-1},1},{{0,0,1},1}},{-(1/(2 Sqrt[3])),{{0,1,0},1},{{0,-1,0},1}},{-(1/(2 Sqrt[3])),{{0,-1,0},1},{{0,1,0},1}},{-(1/(2 Sqrt[3])),{{1,0,0},1},{{-1,0,0},1}},{-(1/(2 Sqrt[3])),{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},EplusOhP,2]={{0,{{0,0,1},1},{{0,0,-1},1}},{0,{{0,0,-1},1},{{0,0,1},1}},{-(1/2),{{0,1,0},1},{{0,-1,0},1}},{-(1/2),{{0,-1,0},1},{{0,1,0},1}},{1/2,{{1,0,0},1},{{-1,0,0},1}},{1/2,{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},T1minusOhP,1]={{0,{{0,0,1},1},{{0,0,-1},1}},{0,{{0,0,-1},1},{{0,0,1},1}},{-(I/2),{{0,1,0},1},{{0,-1,0},1}},{I/2,{{0,-1,0},1},{{0,1,0},1}},{-(1/2),{{1,0,0},1},{{-1,0,0},1}},{1/2,{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},T1minusOhP,2]={{1/Sqrt[2],{{0,0,1},1},{{0,0,-1},1}},{-(1/Sqrt[2]),{{0,0,-1},1},{{0,0,1},1}},{0,{{0,1,0},1},{{0,-1,0},1}},{0,{{0,-1,0},1},{{0,1,0},1}},{0,{{1,0,0},1},{{-1,0,0},1}},{0,{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,0,1},A1Dic4,{0,0,1},A1Dic4,{0,0,0},T1minusOhP,3]={{0,{{0,0,1},1},{{0,0,-1},1}},{0,{{0,0,-1},1},{{0,0,1},1}},{-(I/2),{{0,1,0},1},{{0,-1,0},1}},{I/2,{{0,-1,0},1},{{0,1,0},1}},{1/2,{{1,0,0},1},{{-1,0,0},1}},{-(1/2),{{-1,0,0},1},{{1,0,0},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},A1plusOhP,1]={{1/(2 Sqrt[3]),{{0,1,1},1},{{0,-1,-1},1}},{1/(2 Sqrt[3]),{{1,0,-1},1},{{-1,0,1},1}},{1/(2 Sqrt[3]),{{-1,0,-1},1},{{1,0,1},1}},{1/(2 Sqrt[3]),{{0,-1,-1},1},{{0,1,1},1}},{1/(2 Sqrt[3]),{{1,-1,0},1},{{-1,1,0},1}},{1/(2 Sqrt[3]),{{-1,-1,0},1},{{1,1,0},1}},{1/(2 Sqrt[3]),{{-1,0,1},1},{{1,0,-1},1}},{1/(2 Sqrt[3]),{{-1,1,0},1},{{1,-1,0},1}},{1/(2 Sqrt[3]),{{1,0,1},1},{{-1,0,-1},1}},{1/(2 Sqrt[3]),{{1,1,0},1},{{-1,-1,0},1}},{1/(2 Sqrt[3]),{{0,1,-1},1},{{0,-1,1},1}},{1/(2 Sqrt[3]),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},EplusOhP,1]={{1/(2 Sqrt[6]),{{0,1,1},1},{{0,-1,-1},1}},{1/(2 Sqrt[6]),{{1,0,-1},1},{{-1,0,1},1}},{1/(2 Sqrt[6]),{{-1,0,-1},1},{{1,0,1},1}},{1/(2 Sqrt[6]),{{0,-1,-1},1},{{0,1,1},1}},{-(1/Sqrt[6]),{{1,-1,0},1},{{-1,1,0},1}},{-(1/Sqrt[6]),{{-1,-1,0},1},{{1,1,0},1}},{1/(2 Sqrt[6]),{{-1,0,1},1},{{1,0,-1},1}},{-(1/Sqrt[6]),{{-1,1,0},1},{{1,-1,0},1}},{1/(2 Sqrt[6]),{{1,0,1},1},{{-1,0,-1},1}},{-(1/Sqrt[6]),{{1,1,0},1},{{-1,-1,0},1}},{1/(2 Sqrt[6]),{{0,1,-1},1},{{0,-1,1},1}},{1/(2 Sqrt[6]),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},EplusOhP,2]={{-(1/(2 Sqrt[2])),{{0,1,1},1},{{0,-1,-1},1}},{1/(2 Sqrt[2]),{{1,0,-1},1},{{-1,0,1},1}},{1/(2 Sqrt[2]),{{-1,0,-1},1},{{1,0,1},1}},{-(1/(2 Sqrt[2])),{{0,-1,-1},1},{{0,1,1},1}},{0,{{1,-1,0},1},{{-1,1,0},1}},{0,{{-1,-1,0},1},{{1,1,0},1}},{1/(2 Sqrt[2]),{{-1,0,1},1},{{1,0,-1},1}},{0,{{-1,1,0},1},{{1,-1,0},1}},{1/(2 Sqrt[2]),{{1,0,1},1},{{-1,0,-1},1}},{0,{{1,1,0},1},{{-1,-1,0},1}},{-(1/(2 Sqrt[2])),{{0,1,-1},1},{{0,-1,1},1}},{-(1/(2 Sqrt[2])),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T1minusOhP,1]={{1/4,{{0,1,1},1},{{0,-1,-1},1}},{-(I/4),{{1,0,-1},1},{{-1,0,1},1}},{I/4,{{-1,0,-1},1},{{1,0,1},1}},{-(1/4),{{0,-1,-1},1},{{0,1,1},1}},{-(1/4)-I/4,{{1,-1,0},1},{{-1,1,0},1}},{-(1/4)+I/4,{{-1,-1,0},1},{{1,1,0},1}},{I/4,{{-1,0,1},1},{{1,0,-1},1}},{1/4+I/4,{{-1,1,0},1},{{1,-1,0},1}},{-(I/4),{{1,0,1},1},{{-1,0,-1},1}},{1/4-I/4,{{1,1,0},1},{{-1,-1,0},1}},{1/4,{{0,1,-1},1},{{0,-1,1},1}},{-(1/4),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T1minusOhP,2]={{I/(2 Sqrt[2]),{{0,1,1},1},{{0,-1,-1},1}},{-(I/(2 Sqrt[2])),{{1,0,-1},1},{{-1,0,1},1}},{-(I/(2 Sqrt[2])),{{-1,0,-1},1},{{1,0,1},1}},{-(I/(2 Sqrt[2])),{{0,-1,-1},1},{{0,1,1},1}},{0,{{1,-1,0},1},{{-1,1,0},1}},{0,{{-1,-1,0},1},{{1,1,0},1}},{I/(2 Sqrt[2]),{{-1,0,1},1},{{1,0,-1},1}},{0,{{-1,1,0},1},{{1,-1,0},1}},{I/(2 Sqrt[2]),{{1,0,1},1},{{-1,0,-1},1}},{0,{{1,1,0},1},{{-1,-1,0},1}},{-(I/(2 Sqrt[2])),{{0,1,-1},1},{{0,-1,1},1}},{I/(2 Sqrt[2]),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T1minusOhP,3]={{1/4,{{0,1,1},1},{{0,-1,-1},1}},{I/4,{{1,0,-1},1},{{-1,0,1},1}},{-(I/4),{{-1,0,-1},1},{{1,0,1},1}},{-(1/4),{{0,-1,-1},1},{{0,1,1},1}},{-(1/4)+I/4,{{1,-1,0},1},{{-1,1,0},1}},{-(1/4)-I/4,{{-1,-1,0},1},{{1,1,0},1}},{-(I/4),{{-1,0,1},1},{{1,0,-1},1}},{1/4-I/4,{{-1,1,0},1},{{1,-1,0},1}},{I/4,{{1,0,1},1},{{-1,0,-1},1}},{1/4+I/4,{{1,1,0},1},{{-1,-1,0},1}},{1/4,{{0,1,-1},1},{{0,-1,1},1}},{-(1/4),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2minusOhP,1]={{1/4,{{0,1,1},1},{{0,-1,-1},1}},{-(I/4),{{1,0,-1},1},{{-1,0,1},1}},{I/4,{{-1,0,-1},1},{{1,0,1},1}},{-(1/4),{{0,-1,-1},1},{{0,1,1},1}},{1/4+I/4,{{1,-1,0},1},{{-1,1,0},1}},{1/4-I/4,{{-1,-1,0},1},{{1,1,0},1}},{I/4,{{-1,0,1},1},{{1,0,-1},1}},{-(1/4)-I/4,{{-1,1,0},1},{{1,-1,0},1}},{-(I/4),{{1,0,1},1},{{-1,0,-1},1}},{-(1/4)+I/4,{{1,1,0},1},{{-1,-1,0},1}},{1/4,{{0,1,-1},1},{{0,-1,1},1}},{-(1/4),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2minusOhP,2]={{I/(2 Sqrt[2]),{{0,1,1},1},{{0,-1,-1},1}},{I/(2 Sqrt[2]),{{1,0,-1},1},{{-1,0,1},1}},{I/(2 Sqrt[2]),{{-1,0,-1},1},{{1,0,1},1}},{-(I/(2 Sqrt[2])),{{0,-1,-1},1},{{0,1,1},1}},{0,{{1,-1,0},1},{{-1,1,0},1}},{0,{{-1,-1,0},1},{{1,1,0},1}},{-(I/(2 Sqrt[2])),{{-1,0,1},1},{{1,0,-1},1}},{0,{{-1,1,0},1},{{1,-1,0},1}},{-(I/(2 Sqrt[2])),{{1,0,1},1},{{-1,0,-1},1}},{0,{{1,1,0},1},{{-1,-1,0},1}},{-(I/(2 Sqrt[2])),{{0,1,-1},1},{{0,-1,1},1}},{I/(2 Sqrt[2]),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2minusOhP,3]={{-(1/4),{{0,1,1},1},{{0,-1,-1},1}},{-(I/4),{{1,0,-1},1},{{-1,0,1},1}},{I/4,{{-1,0,-1},1},{{1,0,1},1}},{1/4,{{0,-1,-1},1},{{0,1,1},1}},{-(1/4)+I/4,{{1,-1,0},1},{{-1,1,0},1}},{-(1/4)-I/4,{{-1,-1,0},1},{{1,1,0},1}},{I/4,{{-1,0,1},1},{{1,0,-1},1}},{1/4-I/4,{{-1,1,0},1},{{1,-1,0},1}},{-(I/4),{{1,0,1},1},{{-1,0,-1},1}},{1/4+I/4,{{1,1,0},1},{{-1,-1,0},1}},{-(1/4),{{0,1,-1},1},{{0,-1,1},1}},{1/4,{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2plusOhP,1]={{1/(2 Sqrt[2]),{{0,1,1},1},{{0,-1,-1},1}},{I/(2 Sqrt[2]),{{1,0,-1},1},{{-1,0,1},1}},{-(I/(2 Sqrt[2])),{{-1,0,-1},1},{{1,0,1},1}},{1/(2 Sqrt[2]),{{0,-1,-1},1},{{0,1,1},1}},{0,{{1,-1,0},1},{{-1,1,0},1}},{0,{{-1,-1,0},1},{{1,1,0},1}},{I/(2 Sqrt[2]),{{-1,0,1},1},{{1,0,-1},1}},{0,{{-1,1,0},1},{{1,-1,0},1}},{-(I/(2 Sqrt[2])),{{1,0,1},1},{{-1,0,-1},1}},{0,{{1,1,0},1},{{-1,-1,0},1}},{-(1/(2 Sqrt[2])),{{0,1,-1},1},{{0,-1,1},1}},{-(1/(2 Sqrt[2])),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2plusOhP,2]={{0,{{0,1,1},1},{{0,-1,-1},1}},{0,{{1,0,-1},1},{{-1,0,1},1}},{0,{{-1,0,-1},1},{{1,0,1},1}},{0,{{0,-1,-1},1},{{0,1,1},1}},{1/2,{{1,-1,0},1},{{-1,1,0},1}},{-(1/2),{{-1,-1,0},1},{{1,1,0},1}},{0,{{-1,0,1},1},{{1,0,-1},1}},{1/2,{{-1,1,0},1},{{1,-1,0},1}},{0,{{1,0,1},1},{{-1,0,-1},1}},{-(1/2),{{1,1,0},1},{{-1,-1,0},1}},{0,{{0,1,-1},1},{{0,-1,1},1}},{0,{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{0,1,1},A1Dic2,{0,1,1},A1Dic2,{0,0,0},T2plusOhP,3]={{1/(2 Sqrt[2]),{{0,1,1},1},{{0,-1,-1},1}},{-(I/(2 Sqrt[2])),{{1,0,-1},1},{{-1,0,1},1}},{I/(2 Sqrt[2]),{{-1,0,-1},1},{{1,0,1},1}},{1/(2 Sqrt[2]),{{0,-1,-1},1},{{0,1,1},1}},{0,{{1,-1,0},1},{{-1,1,0},1}},{0,{{-1,-1,0},1},{{1,1,0},1}},{-(I/(2 Sqrt[2])),{{-1,0,1},1},{{1,0,-1},1}},{0,{{-1,1,0},1},{{1,-1,0},1}},{I/(2 Sqrt[2]),{{1,0,1},1},{{-1,0,-1},1}},{0,{{1,1,0},1},{{-1,-1,0},1}},{-(1/(2 Sqrt[2])),{{0,1,-1},1},{{0,-1,1},1}},{-(1/(2 Sqrt[2])),{{0,-1,1},1},{{0,1,-1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},A1plusOhP,1]={{1/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{1/(2 Sqrt[2]),{{1,1,-1},1},{{-1,-1,1},1}},{1/(2 Sqrt[2]),{{-1,-1,-1},1},{{1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,1},1},{{1,-1,-1},1}},{1/(2 Sqrt[2]),{{1,-1,1},1},{{-1,1,-1},1}},{1/(2 Sqrt[2]),{{-1,-1,1},1},{{1,1,-1},1}},{1/(2 Sqrt[2]),{{1,-1,-1},1},{{-1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},A2minusOhP,1]={{1/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{-(1/(2 Sqrt[2])),{{1,1,-1},1},{{-1,-1,1},1}},{-(1/(2 Sqrt[2])),{{-1,-1,-1},1},{{1,1,1},1}},{-(1/(2 Sqrt[2])),{{-1,1,1},1},{{1,-1,-1},1}},{-(1/(2 Sqrt[2])),{{1,-1,1},1},{{-1,1,-1},1}},{1/(2 Sqrt[2]),{{-1,-1,1},1},{{1,1,-1},1}},{1/(2 Sqrt[2]),{{1,-1,-1},1},{{-1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T1minusOhP,1]={{1/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{1/(2 Sqrt[2]),{{1,1,-1},1},{{-1,-1,1},1}},{-(1/(2 Sqrt[2])),{{-1,-1,-1},1},{{1,1,1},1}},{I/(2 Sqrt[2]),{{-1,1,1},1},{{1,-1,-1},1}},{-(I/(2 Sqrt[2])),{{1,-1,1},1},{{-1,1,-1},1}},{-(1/(2 Sqrt[2])),{{-1,-1,1},1},{{1,1,-1},1}},{-(I/(2 Sqrt[2])),{{1,-1,-1},1},{{-1,1,1},1}},{I/(2 Sqrt[2]),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T1minusOhP,2]={{(-1)^(3/4)/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{1,1,-1},1},{{-1,-1,1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{-1,-1,-1},1},{{1,1,1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{-1,1,1},1},{{1,-1,-1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{1,-1,1},1},{{-1,1,-1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{-1,-1,1},1},{{1,1,-1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{1,-1,-1},1},{{-1,1,1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T1minusOhP,3]={{I/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{I/(2 Sqrt[2]),{{1,1,-1},1},{{-1,-1,1},1}},{-(I/(2 Sqrt[2])),{{-1,-1,-1},1},{{1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,1},1},{{1,-1,-1},1}},{-(1/(2 Sqrt[2])),{{1,-1,1},1},{{-1,1,-1},1}},{-(I/(2 Sqrt[2])),{{-1,-1,1},1},{{1,1,-1},1}},{-(1/(2 Sqrt[2])),{{1,-1,-1},1},{{-1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T2plusOhP,1]={{-(I/(2 Sqrt[2])),{{1,1,1},1},{{-1,-1,-1},1}},{I/(2 Sqrt[2]),{{1,1,-1},1},{{-1,-1,1},1}},{-(I/(2 Sqrt[2])),{{-1,-1,-1},1},{{1,1,1},1}},{1/(2 Sqrt[2]),{{-1,1,1},1},{{1,-1,-1},1}},{-(1/(2 Sqrt[2])),{{1,-1,1},1},{{-1,1,-1},1}},{I/(2 Sqrt[2]),{{-1,-1,1},1},{{1,1,-1},1}},{1/(2 Sqrt[2]),{{1,-1,-1},1},{{-1,1,1},1}},{-(1/(2 Sqrt[2])),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T2plusOhP,2]={{(-1)^(3/4)/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{1,1,-1},1},{{-1,-1,1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{-1,-1,-1},1},{{1,1,1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{-1,1,1},1},{{1,-1,-1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{1,-1,1},1},{{-1,1,-1},1}},{(-1)^(3/4)/(2 Sqrt[2]),{{-1,-1,1},1},{{1,1,-1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{1,-1,-1},1},{{-1,1,1},1}},{-((-1)^(3/4)/(2 Sqrt[2])),{{-1,1,-1},1},{{1,-1,1},1}}};
  CG[{1,1,1},A1Dic3,{1,1,1},A1Dic3,{0,0,0},T2plusOhP,3]={{1/(2 Sqrt[2]),{{1,1,1},1},{{-1,-1,-1},1}},{-(1/(2 Sqrt[2])),{{1,1,-1},1},{{-1,-1,1},1}},{1/(2 Sqrt[2]),{{-1,-1,-1},1},{{1,1,1},1}},{-(I/(2 Sqrt[2])),{{-1,1,1},1},{{1,-1,-1},1}},{I/(2 Sqrt[2]),{{1,-1,1},1},{{-1,1,-1},1}},{-(1/(2 Sqrt[2])),{{-1,-1,1},1},{{1,1,-1},1}},{-(I/(2 Sqrt[2])),{{1,-1,-1},1},{{-1,1,1},1}},{I/(2 Sqrt[2]),{{-1,1,-1},1},{{1,-1,1},1}}};

  irname1=IrrepName[px1, py1, pz1][[irrepidx1]];
  irname2=IrrepName[px2, py2, pz2][[irrepidx2]];
  irnameout=IrrepName[pxout, pyout, pzout][[irrepidxout]];


  If[Not[ListQ[CG[{psx1, psy1, psz1}, irname1, {psx2, psy2, psz2} , irname2, {pxout, pyout, pzout} , irnameout, irrepevout]]],Print["Missing the CG coefficients for the given combination, you must generate them"];Abort[];];
  cg=CG[{psx1, psy1, psz1}, irname1, {psx2, psy2, psz2} , irname2, {pxout, pyout, pzout} , irnameout, irrepevout];

  res1 = Sum[cg[[i, 1]] oo[Flatten[{cg[[i, 2]],irrepidx1,charge1, path1}]] oo[Flatten[{cg[[i, 3]],irrepidx1,charge2, path2}]] , {i, 1, Length[cg]}];
  res1 = Expand[res1 //. { oo[ {a2_, a3_, a4_,a6_, a1_, 1, a5_}] :> oo[ -a2, -a3, -a4, a1, a6, 1, a5,-1] /; a2 + a3 + a4 < 0, 
                    oo[ {a2_, a3_, a4_, a6_, a1_, -1, a5_}] :> -oo[ -a2, -a3, -a4, a1, a6, -1, a5,-1] /; a2 + a3 + a4 < 0, 
                    oo[ {a2_, a3_, a4_, a6_, a1_, a5_, a7_}] :> oo[ a2, a3, a4, a1, a6, a5, a7, 1] /; a2 + a3 + a4 >= 0}];

  If[Head[res1] == Plus, 
    res2 = Table[res1[[i]], {i, 1, Length[res1]}];, 
    res2 = {res1} ;
  ];
  cg=res2//. Times[A_,oo[B__],oo[C__]] :> {A,{B},{C}};
  cg = cg //. {aa_,{B1x_,B1y_,B1z_,bb1_,dd1_,C1_,cc1_},{B2x_,B2y_,B2z_,bb2_,dd2_,C2_,cc2_}} :> {aa,{B2x,B2y,B2z,bb2,dd2,C2,cc2},{B1x,B1y,B1z,bb1,dd1,C1,cc1}} /; Not[SameQ[C1,path1]];

  res=0;
  cg1={};
  Do[
    lres=0;
    lpx1=cg[[i, 2, 1]];
    lpy1=cg[[i, 2, 2]];
    lpz1=cg[[i, 2, 3]];
    lridx1=cg[[i, 2, 4]];
    lev1=cg[[i, 2, 5]];
    lchg1=cg[[i, 2, 6]];
    lpath1=cg[[i, 2, 7]];

    lpx2=cg[[i, 3, 1]];
    lpy2=cg[[i, 3, 2]];
    lpz2=cg[[i, 3, 3]];
    lridx2=cg[[i, 3, 4]];
    lev2=cg[[i, 3, 5]];
    lchg2=cg[[i, 3, 6]];
    lpath2=cg[[i, 3, 7]];
  
    lres+=Add1trOpCorrelators[lpx1, lpy1, lpz1, lridx1, lev1, lchg1, lpath1];
    lres+=Add1trOpCorrelators[lpx2, lpy2, lpz2, lridx2, lev2, lchg2, lpath2];
    If[lres==2,
      AppendTo[cg1,cg[[i]]]; 
      res+=lres;
    ];
  ,{i,1,Length[cg]}];
  cg=cg1;
  
  If[res==0,Print["All the requested operators have zero projection onto the given symmetry channel"];Abort[];]
  
  If[!NumberQ[N2trOPtobemeasured[pxout, pyout, pzout, irrepidxout, irrepevout, charge]],
      N2trOPtobemeasured[pxout, pyout, pzout, irrepidxout, irrepevout, charge]=0;
      List2trOPtobemeasured[pxout, pyout, pzout, irrepidxout, irrepevout, charge]={};
    ];

    N2trOPtobemeasured[pxout, pyout, pzout, irrepidxout, irrepevout, charge]++;

    AppendTo[List2trOPtobemeasured[pxout, pyout, pzout, irrepidxout, irrepevout, charge],cg];
    

    If[Not[ListQ[Opindex[pxout, pyout, pzout, irrepidxout, charge]]],
      tmp={Table[-2,{i,1,Length[bTOrthog[pxout, pyout, pzout][[irrepidxout]]]}]};,
      tmp=Append[Opindex[pxout, pyout, pzout, irrepidxout, charge],Table[-2,{i,1,Length[bTOrthog[pxout, pyout, pzout][[irrepidxout]]]}]];
      ];
    Opindex[pxout, pyout, pzout, irrepidxout, charge]=tmp;
    (*Questo e' orribile  non tengo conto mai che i multipletti di due traccie possono contenere piu' ev (faccio finta siano tutti non relazionati)*)

];

Add1trOpCorrelators[px_, py_, pz_, irrepidx_, irrepev_, charge_, path_]:= Add1trOpCorrelators[px, py, pz, irrepidx, irrepev, charge, path] = Module[{res,success=0},
  If[Not[ListQ[bTOrthog[px, py, pz]]],    Print["Missing Coefficient table for the given impulse"];Abort[];];
  If[Length[bTOrthog[px, py, pz]] < irrepidx || irrepidx < 1 , Print["Number of irreps is not compatible with the requested irrep index"];Abort[];];
  If[Length[bTOrthog[px, py, pz][[irrepidx]]] < irrepev || irrepev < 1,  Print["Irrep dimension is not compatible with the requested irrep ev"];Abort[];];
  If[Not[Or[charge==-1, charge==+1]],Print["Charge can only take values +1 or -1"];Abort[];];


  If[px+py+pz<0, 
    success=Add1trOpCorrelators[-px, -py, -pz, irrepidx, irrepev, charge, path];
    ,
    res=OpGenerate[px, py, pz, irrepidx, irrepev, path];
    If[ListQ[res],
      If[!NumberQ[N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]],
        N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]=0;
        List1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]={};
      ];

      If[ And[Not[SameQ[res[[1, 1]], 0]],charge==+1], 
        success=1;
        If[IntersectingQ[List1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge],{res[[2,1]]}], Print["Operator already included"];Abort[];];
        N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]++;
        AppendTo[List1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge],res[[2,1]]];
      ];

      If[ And[Not[SameQ[res[[1, 2]], 0]],charge==-1], 
        success=1;
        If[IntersectingQ[List1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge],{res[[2,2]]}], Print["Operator already included"];Abort[];];
        N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]++;
        AppendTo[List1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge],res[[2,2]]];
      ];
      If[success!=1,
        Print["Requested operator : ",path,"\n Total P=(",px,",", py,",", pz,")\n Irrep=",IrrepName[px,py,pz][[irrepidx]],"\n Irrep ev=",irrepev,"/",Length[bTOrthog[px,py,pz][[irrepidx]]],"\n Charge=",charge];
        Print["The operator has zero projection onto the given symmetry channel for the specified charge\n\n"];    
        , 
        Print["Added to the correlator list: ",path,"\n Total P=(",px,",", py,",", pz,")\n Irrep=",IrrepName[px,py,pz][[irrepidx]],"\n Irrep ev=",irrepev,"/",Length[bTOrthog[px,py,pz][[irrepidx]]],"\n Charge=",charge,"\n\n"];
      ];
      ,
      Print["Requested operator : ",path,"\n Total P=(",px,",", py,",", pz,")\n Irrep=",IrrepName[px,py,pz][[irrepidx]],"\n Irrep ev=",irrepev,"/",Length[bTOrthog[px,py,pz][[irrepidx]]],"\n Charge=",charge];
      Print["The operator has zero projection onto the given symmetry channel\n\n"];
    ];
  ];
success];

OpGenerate[px_, py_, pz_, irrepidx_, irrepev_, path_] := Module[{res,res1,tres,tmp,nid,opnumplus=NULL,opnumminus=NULL},
  If[Not[ListQ[bTOrthog[px, py, pz]]],    Print["Missing Coefficient table for the given impulse"];Abort[];];
  If[Length[bTOrthog[px, py, pz]] < irrepidx || irrepidx < 1 , Print["Number of irreps is not compatible with the requested irrep index"];Abort[];];
  If[Length[bTOrthog[px, py, pz][[irrepidx]]] < irrepev || irrepev < 1,  Print["Irrep dimension is not compatible with the requested irrep ev"];Abort[];];

  (**)
  res = Sum[ bTOrthog[px, py, pz][[irrepidx, irrepev, i]] (path //. permutationTable[[i]]), {i, 1, 48}];
  res = res //. btoa;
  res = OpSimplify[res];
  If[px==0,res=res //. P[A__][ax_,ay_,az_] :>  P[A][0,ay,az]];
  If[py==0,res=res //. P[A__][ax_,ay_,az_] :>  P[A][ax,0,az]];
  If[pz==0,res=res //. P[A__][ax_,ay_,az_] :>  P[A][ax,ay,0]];
  res1={NULL,NULL};
  tres = res //. Conjugate[P[A__][ax_,ay_,az_]] :> Pre[A][ax,ay,az];
  tres = tres //. P[A__][ax_,ay_,az_] :> Pre[A][ax,ay,az];
  res1[[1]] = tres;
  tres = res //. Conjugate[P[A__][ax_,ay_,az_]] :> -Pim[A][ax,ay,az];
  tres = tres //. P[A__][ax_,ay_,az_] :> Pim[A][ax,ay,az];
  res1[[2]] = tres;
  
  If[Not[SameQ[res1[[1]],0]],
    If[Not[ListQ[Opindex[px, py, pz, irrepidx,+1]]],
      Opindex[px, py, pz, irrepidx,+1]={};
    ];
    If[Not[NumberQ[Opindex[px, py, pz, irrepidx,+1,PathUniqueIndex[path]]]],
      tmp = Opindex[px, py, pz, irrepidx,+1];
      AppendTo[tmp,Table[0,{i,1,Length[bTOrthog[px, py, pz][[irrepidx]]]}]];
      Opindex[px, py, pz, irrepidx,+1]=tmp;
      Opindex[px, py, pz, irrepidx,+1,PathUniqueIndex[path]]=Length[tmp];
    ];

    nid=Opindex[px, py, pz, irrepidx,+1,PathUniqueIndex[path]];

    opnumplus=Opindex[px, py, pz, irrepidx,+1][[nid,irrepev]];

    If[opnumplus==0,
      opnumplus=Max[Opindex[px, py, pz, irrepidx,+1]]+1;
      tmp=Opindex[px, py, pz, irrepidx,+1];
      tmp[[nid,irrepev]]=opnumplus;
      Opindex[px, py, pz, irrepidx,+1]=tmp;
    ];


    OpList[px, py, pz, irrepidx, +1,opnumplus]=res1[[1]];
  ];

  If[Not[SameQ[res1[[2]],0]],
    If[Not[ListQ[Opindex[px, py, pz, irrepidx,-1]]],
      Opindex[px, py, pz, irrepidx,-1]={};
    ];
    If[Not[NumberQ[Opindex[px, py, pz, irrepidx,-1,PathUniqueIndex[path]]]],
      tmp = Opindex[px, py, pz, irrepidx,-1];
      AppendTo[tmp,Table[0,{i,1,Length[bTOrthog[px, py, pz][[irrepidx]]]}]];
      Opindex[px, py, pz, irrepidx,-1]=tmp;
      Opindex[px, py, pz, irrepidx,-1,PathUniqueIndex[path]]=Length[tmp];
    ];

    nid=Opindex[px, py, pz, irrepidx,-1,PathUniqueIndex[path]];

    opnumminus=Opindex[px, py, pz, irrepidx,-1][[nid,irrepev]];

    If[opnumminus==0,
      opnumminus=Max[Opindex[px, py, pz, irrepidx,-1]]+1;
      tmp=Opindex[px, py, pz, irrepidx,-1];
      tmp[[nid,irrepev]]=opnumminus;
      Opindex[px, py, pz, irrepidx,-1]=tmp;
    ];


    OpList[px, py, pz, irrepidx,-1,opnumminus]=res1[[2]];
  ];

  res={res1, {opnumplus,opnumminus}};
  If[res[[1]]=={0,0},res=0];
res];
  (**)
  

OpSimplify[a_] := Module[{ris = a, Ptemp, tmpris, i, normalization, sqrt},
  ris = Select[Variables[ris], MatchQ[#1, P[__]] &];
  Do[
    tmpris=ris[[i]] //. P[a1__] :> Plus[a1];
    If[Not[SameQ[tmpris,0]],Print["Error [OpSimplify]: Inserted a non closed path"];Abort[]];
    PathUniqueIdentifier[ris[[i]]];
    tmpris = ris[[i]] //. P[a1__] :> Union[{a1}];
    If[Complement[tmpris, {ax, ay, az, -ax, -ay, -az}] != {},
    Print["Error [OpSimplify]: Inserted a path that cannot be ciclic Transformed (quite likelly is written with the wrong unit vectors)"];Abort[];];
  , {i, 1, Length[ris]}];
  ris = a //. P -> Ptemp;
  ris = ris //. Ptemp[b___] :> PathUniqueIdentifier[P[b]][[1]];
  ris = Expand[ris];
ris];

PathUniqueIdentifier[a_] := PathUniqueIdentifier[a] = Module[{ris = a,res, Ptemp, tmpris, lper,listris,r3},
  If[Not[NumberQ[pathindex]],pathindex=0];
  ris = ris //. P -> Ptemp ;
  Ptemp /: Ptemp[-(a1_), a2___] := Ptemp[a2, -a1] /; IsIn[a1];
  Ptemp /: Ptemp[a1_, -(a2_), a3___, b1_, b2_, a4___] :=  Ptemp[b1, b2, a4, a1, -a2, a3] /; IsIn[a1] && IsIn[a2] && IsIn[b1] && IsIn[b2];
  Ptemp /: Ptemp[a1_, a2_, -(a3_), a4___, b1_, b2_, b3_, a5___] := Ptemp[b1, b2, b3, a5, a1, a2, -a3, a4] /; IsIn[a1] && IsIn[a2] && IsIn[a3] && IsIn[b1] && IsIn[b2] && IsIn[b3];
  Ptemp /: Ptemp[b2_, a2___, b1_] := Ptemp[b1, b2, a2] /; IsIn[b1] && IsIn[b2];
  Ptemp /: Ptemp[b1_, -(a1_), a2___, -(a3_), ax, -(a4_), a5___] := Ptemp[ax, -a4, a5, b1, -a1, a2, -a3] /;  IsIn[a1] && IsIn[a3] && IsIn[a4] && Intersection[{b1}, {ay, az}] !=  {};
  Ptemp /: Ptemp[az, -(a1_), a2___, -(a3_), ay, -(a4_), a5___] := Ptemp[ay, -a4, a5, az, -a1, a2, -a3] /;  IsIn[a1] && IsIn[a3] && IsIn[a4] && Intersection[{ax}, {a2, a5}] ==  {};
  Ptemp /: Ptemp[b1_, -(a1_), ax, -(a2_), a3___] :=  Ptemp[ax, -a2, a3, b1, -a1] /; IsIn[a1] && IsIn[a2] && Intersection[{b1}, {ay, az}] != {};
  Ptemp /: Ptemp[az, -(a1_), ay, -(a2_), a3___] := Ptemp[ay, -a2, a3, az, -a1] /; IsIn[a1] && IsIn[a2] && Intersection[{ax}, {a3}] == {};
  ris = Expand[ris] //. Ptemp -> P;
  tmpris = ris //. P -> List;
  listris = tmpris;
  ris = ris //. P[A1__] :> P1[A1][0,0,0];
  lper = Length[tmpris];
  r3=0;
  Do[
   tmpris = tmpris /. {a1_, a2___, a3_} -> {a3, a1, a2};
    r3 += tmpris[[1]] //. { ax -> {1,0,0} , ay -> {0,1,0} , az -> {0,0,1} };
    res = ris //. P1[A1__][0,0,0] :> P[A1][r3[[1]],r3[[2]],r3[[3]]];
    PathUniqueIdentifier[tmpris //. List -> P] = {res,pathindex};
  , {i, 1, lper - 1}];
  tmpris = listris;
  tmpris = Reverse[-tmpris];
  r3=0;
  Do[
    tmpris = tmpris /. {a1_, a2___, a3_} -> {a3, a1, a2};
    r3 += tmpris[[1]] //. { ax -> {1,0,0} , ay -> {0,1,0} , az -> {0,0,1} };
    res = ris //. P1[A1__][0,0,0] :> P[A1][r3[[1]],r3[[2]],r3[[3]]];
    PathUniqueIdentifier[tmpris //. List -> P] = {Conjugate[res],pathindex};
  , {i, 1, lper}];
  PathList[pathindex]=ris //. P1[A__][B__] -> P[A];
  pathindex=pathindex+1;
  ris = ris //. P1 -> P;
{ris,pathindex-1}]

PathUniqueIndex[a_]:= PathUniqueIdentifier[a][[2]]

<< SymbolicC`;
MyCForm[a_] := Module[{res, res1},
   res = ToCCodeString[CExpression[a]];
   res1 = 
    StringReplace[res, 
     RegularExpression["Complex\\(0.,([0-9\\.]+)\\)"] :> 
      " (+ I*($1))"];
   res = StringReplace[res1, 
     RegularExpression["Complex\\(([0-9\\.]+),([0-9\\.]+)\\)"] :> 
      " ($1 + I*$2)"];
   res1 = 
    StringReplace[res, 
     RegularExpression["Complex\\(([0-9]+),([0-9]+)\\)"] :> 
      " ($1 + I*$2)"];
   res = StringReplace[res1, 
     RegularExpression["Complex\\(([0-9\\.]+),-([0-9\\.]+)\\)"] :> 
      " ($1 - I*$2)"];
   res1 = 
    StringReplace[res, 
     RegularExpression["Complex\\(([0-9]+),-([0-9\\.]+)\\)"] :> 
      " ($1 - I*$2)"];
   res1];

GenerateCchecks[]:=Module[{Op,OpTmp,ar,irrepdim,EvaluatedQ,RActiveOp,RMatrixOp,Px, Py, Pz, irrepindex, i, charge},
  ar=OpenWrite[checkfunctionsfilename,FormatType->InputForm];
  WriteString[ar,"/*This is an automatically generated function, do not edit.*/\nstatic int fullcheck(int rotid, double complex *rotated, double complex *unrotated)\n{\n#define rotfun(a) rotated[(a)]\n#define unrotfun(a) unrotated[(a)]\ndouble complex tmp[2];\nint return_value=0;\n"];
  Do[
    Do[
      Do[ 
        If[ListQ[Opindex[Px,Py,Pz,irrepindex,charge]],
          Print["Now checking P="<>ToString[{Px,Py,Pz}]<>"."];
          irrepdim=Length[bTOrthog[Px,Py,Pz][[irrepindex]]];
          Print["Currently checking irrep number "<>ToString[irrepindex]<>", with dim="<>ToString[irrepdim]<>"."];
          Do[
            OpTmp=Table[IntersectingQ[Flatten[{List1trOPtobemeasured[Px,Py,Pz,irrepindex,i,charge]}],{Opindex[Px,Py,Pz,irrepindex,charge][[id,i]]}],{i,1,irrepdim}];
            EvaluatedQ=OpTmp//.List -> And;
            If[EvaluatedQ,
              OpTmp=Transpose[{Table[Op[Px,Py,Pz,irrepindex,charge,Opindex[Px,Py,Pz,irrepindex,charge][[id,i]]],{i,1,irrepdim}]}];
              RMatrixOp=Table[Expand[N[irrepSetOrthog[Px,Py,Pz][[irrepindex]][[i]]].OpTmp],{i,1,Ord[Px,Py,Pz]}];
              Off[Part::partd];
              OpTmp=OpTmp//.Op[a__]:>rotfun[MapOptoCindex[a]];
              Print["The operators: ",OpTmp];
              RMatrixOp=RMatrixOp//.Op[a__]:>unrotfun[MapOptoCindex[a]];
              Print["And their rotations: ",RMatrixOp];
              On[Part::partd];
              Do[
                Do[
                  WriteString[ar,"if(",Position[permutationTable,permTab[Px,Py,Pz][[i]]][[1,1]]-1,"==rotid){\n tmp[0]=",MyCForm[OpTmp[[j,1]]-RMatrixOp[[i,j,1]]],";\n _complex_mul_star(tmp[1],tmp[0],tmp[0]);\n if(sqrt(creal(tmp[1]))>1.e-12) {\nreturn_value++;\n }\n}\n"];
                ,{j,1,irrepdim}];
              ,{i,1,Ord[Px,Py,Pz]}];
              ];
            ,{id,1,Length[Opindex[Px,Py,Pz,irrepindex,charge]]}];
          ];
      ,{charge,-1,1,2}];
    ,{irrepindex,1,Length[bTOrthog[Px,Py,Pz]]}];
  ,{Px,-1,1},{Py,-1,1},{Pz,-1,1}];
  WriteString[ar,"#undef unrotfunreturn\n#undef rotfun\nreturn return_value;\n}\n"];
  Close[ar];
  ]






  PathGenerateCcode[idx_] := PathGenerateCcode[idx] = Module[{steps,ar,i},
  ar = OpenAppend[opfilename, FormatType -> InputForm];
  (**)
  WriteString[ar, "static double complex path", idx, "(int in)\n"];
  WriteString[ar, "{\nsuNg *w1, *w2;\nsuNg res, res1;\nint site=in;\ndouble complex p;\n\n"];
  steps = PathList[idx] //. P[A__] :> List[A];
  If[posdir[steps[[1]]],
    WriteString[ar, "w2 = pu_gauge_wrk(site,", dir[steps[[1]]], ");\n\n"];,
    WriteString[ar, "site = idn_wrk(site, ", dir[steps[[1]]], ");\n"];
    WriteString[ar, "w2 = pu_gauge_wrk(site,", dir[steps[[1]]], ");\n\n"];
    WriteString[ar, "_suNg_dagger(res1,*w2);\n"];
    WriteString[ar, "w2 = &res1;\n"];
  ];
  (**)
  Do[
    If[posdir[steps[[i - 1]]] && posdir[steps[[i]]],  WriteString[ar, "site = iup_wrk(site, ", dir[steps[[i-1]]], ");\n"];];
    If[Not[posdir[steps[[i - 1]]]] && Not[posdir[steps[[i]]]], WriteString[ar, "site = idn_wrk(site, ", dir[steps[[i]]], ");\n"];];
    If[Not[posdir[steps[[i - 1]]]] && posdir[steps[[i]]], Null];
    If[posdir[steps[[i - 1]]] && Not[posdir[steps[[i]]]],
      WriteString[ar, "site = iup_wrk(site, ", dir[steps[[i - 1]]],");\nsite = idn_wrk(site, ", dir[steps[[i]]], ");\n"];
    ];
  (**)
    WriteString[ar, "w1 = pu_gauge_wrk(site,", dir[steps[[i]]], ");\n"];
    If[posdir[steps[[i]]], WriteString[ar, "_suNg_times_suNg("];,
      WriteString[ar, "_suNg_times_suNg_dagger("];
    ];
  (**)
    If[i == 2, WriteString[ar, " res, *w2, *w1);\n\n"];,
      If[OddQ[i], WriteString[ar, "res1, res, *w1);\n\n"];,
      WriteString[ar, "res, res1, *w1);\n\n"];];
    ];
  ,{i, 2, Length[steps]}];
  (**)
  WriteString[ar, "_suNg_trace(p,res);\nreturn p;\n}\n\n"];
  Close[ar];
  WrittenPaths[idx]=1;
  ]


OpGroupStringPaths[px_, py_, pz_, iridx_, charge_] := 
  Module[{res = Opindex[px, py, pz, iridx, charge], string = "|",tmpstring,i,j,lpath,step},
  Do[
    Do[
      If[NumberQ[MapOptoCindex[px, py, pz, iridx, charge, res[[i, j]]] ] , 
        string=string<>ToString[MapOptoCindex[px, py, pz, iridx, charge, res[[i, j]]]]<>"=";
         lpath=OpList[px, py, pz, iridx, charge,res[[i, j]]];
         If[Head[lpath]==Plus,lpath=lpath[[1]]];
         lpath = lpath //.  a1_. a_[A__][b__] :> {A} ;
         Do[
             step=lpath[[i]]//.{ax -> x , ay -> y , az-> z};
             string = string <> ToString[step];
             ,{i,1,Length[lpath]}];
         ,
         If[ res[[i, j]]==-2,
             string=string<>"2tr",
             string = string <> "na";
         ];
       ];
       If[j!=Length[res[[i]]], string = string <>","];
    , {j, 1, Length[res[[i]]]}];
   string = string <> "|";
   , {i, 1, Length[res]}];
  string]
  
  
  
  GenerateCcode[]:=Module[{res,ir1,ir2,path1,path2,llist,lcoeff,lcharge1,lcharge2,llpx1,llpy1,llpz1,llpx2,llpy2,llpz2,llev1,llev2,relsign,ar,twotrstring,opnumber},
  ar=OpenWrite[opfilename, FormatType -> InputForm];
  WriteString[ar, "#include <stdlib.h>\n#include \"global.h\"\n#include \"geometry.h\"\n#include \"suN.h\"\n#include \"utils.h\"\n#include \"glueballs.h\"\n\n"];
   WriteString[ar, "#include <string.h>\n"];
  WriteString[ar,"#define npaths ",pathindex,"\n"];
  WriteString[ar,"static double PI=3.141592653589793238462643383279502884197;\n"];
  WriteString[ar,"static double complex *mom_def_Re_tr_paths=NULL;\n"];
  WriteString[ar,"static double complex *mom_def_Im_tr_paths=NULL;\n"];
  WriteString[ar,"static double complex *path_storage=NULL;\n"];

  WriteString[ar, "int ** direct_spatial_rotations(){\nint i;\nint ** res=malloc(sizeof(int *)*48);\nint *res1=malloc(sizeof(int *)*48*4);\nfor (i=0;i<48;i++)\nres[i]=res1+4*i;\n"];
  WriteString[ar,"\n"];
  Do[
  (*define rotations and inverse rotations*)
    res={0,ax,ay,az} //. permutationTable[[i]];
    res=res //. {bx->1,by->2,bz->3};
    WriteString[ar, "res1[",(i-1)*4,"]=",res[[1]],";\nres1[",(i-1)*4+1,"]=",res[[2]],";\nres1[",(i-1)*4+2,"]=",res[[3]],";\nres1[",(i-1)*4+3,"]=",res[[4]],";\n"];
  ,{i,1,48}];
  WriteString[ar,"return res;\n}\n"];
  WriteString[ar, "int ** inverse_spatial_rotations(){\nint i;\nint ** res=malloc(sizeof(int *)*48);\nint *res1=malloc(sizeof(int *)*48*4);\nfor (i=0;i<48;i++)\nres[i]=res1+4*i;\n"];
  Do[
    res={0,ax,ay,az} //. inversepermutationTable[[i]];
    res=res //. {bx->1,by->2,bz->3};
    WriteString[ar, "res1[",(i-1)*4,"]=",res[[1]],";\nres1[",(i-1)*4+1,"]=",res[[2]],";\nres1[",(i-1)*4+2,"]=",res[[3]],";\nres1[",(i-1)*4+3,"]=",res[[4]],";\n"];
  ,{i,1,48}];
  WriteString[ar,"return res;\n}\n"];
  Close[ar];



  Do[
    Do[
      Do[
        If[ListQ[Opindex[px, py, pz, irrepidx,charge]],
          OneTraceOpGenerateCcode[px, py, pz, irrepidx,charge];
        ];
        ,{charge,-1,1,+2}];
    , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
  , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];


  ar = OpenAppend[opfilename, FormatType -> InputForm];
  WriteString[ar,"static int last_t = -10;\nvoid request_space_paths_evaluation(){last_t=-10;}\n"];
  WriteString[ar,"\nstatic void eval_time_momentum_glueball_paths(int t, int px, int py, int pz)"];
  WriteString[ar,"\n{\nint n_x, n_y, n_z, idx, in;\ndouble complex ce = 0.;\n"];
  WriteString[ar,"if(path_storage==NULL)\n{\n"];
  WriteString[ar, stringshift];
  WriteString[ar,"path_storage=malloc(npaths*X*Y*Z*sizeof(double complex));\n"];
  WriteString[ar,"mom_def_Re_tr_paths=malloc(npaths*sizeof(double complex));\n"];
  WriteString[ar,"mom_def_Im_tr_paths=malloc(npaths*sizeof(double complex));\n}\n"];
  WriteString[ar,"\nfor(in = 0; in < npaths; in++)\n{\nmom_def_Re_tr_paths[in]=0.;\n"];
  WriteString[ar,"mom_def_Im_tr_paths[in]=0.;\n}\n"];
  WriteString[ar,"if (t != last_t)\n{\nlast_t=t;\n"];
  WriteString[ar,"for (n_x = 0; n_x < X; n_x++)\nfor (n_y = 0; n_y < Y; n_y++)\nfor (n_z = 0; n_z < Z; n_z++)\n{\n"];
  WriteString[ar,"in = ipt(t, n_x, n_y, n_z);\nce = cexp(I * 2.0 * PI * (double)(n_x * px + n_y * py + n_z * pz) / GLB_X);\n"];
  WriteString[ar,"idx = npaths * (n_x + X * (n_y + Y * n_z));\n"];
  Do[ 
    If[NumberQ[WrittenPaths[i-1]],
      WriteString[ar,"path_storage[",i-1,"+idx]= path",i-1,"(in);\nmom_def_Re_tr_paths[",i-1,"]+=ce*creal(path_storage[",i-1,"+idx]);"];
      WriteString[ar,"\nmom_def_Im_tr_paths[",i-1,"]+=I*ce*cimag(path_storage[",i-1,"+idx]);\n"];
    ];
  ,{i,1,pathindex}];
  WriteString[ar,"}\n}\nelse{\n"];
  WriteString[ar,"for (n_x = 0; n_x < X; n_x++)\nfor (n_y = 0; n_y < Y; n_y++)\nfor (n_z = 0; n_z < Z; n_z++)\n{\n"];
  WriteString[ar,"ce = cexp(I * 2.0 * PI * (double)(n_x * px + n_y * py + n_z * pz) / GLB_X);\n"];
  WriteString[ar,"idx = npaths * (n_x + X * (n_y + Y * n_z));\n"];
  
  WriteString[ar,"for (int i = 0; i < ",pathindex,"; i++)\n{\nmom_def_Re_tr_paths[i]+=ce*creal(path_storage[i+idx]);\n"];
  WriteString[ar,"mom_def_Im_tr_paths[i]+=I*ce*cimag(path_storage[i+idx]);\n}\n"];

  
  WriteString[ar,"}\n}\n};\n"];
  (**)
  
  WriteString[ar, "void eval_all_glueball_ops(int t, double complex *numerical_op_out)
{
    static double complex *numerical_op = NULL;
    if (numerical_op == NULL)
    {
        numerical_op = malloc(total_n_glue_op * sizeof(double complex));
    }
    request_space_paths_evaluation();
    "];
  opnumberC=0;
  Do[
    evalpaths=0;
    Do[
      Do[
        If[ListQ[Opindex[px, py, pz, irrepidx,charge]],
          If[evalpaths==0 &&  Union[Flatten[Opindex[px, py, pz, irrepidx,charge]]] !={0}, WriteString[ar,"eval_time_momentum_glueball_paths(t,",px,",",py,",",pz,");\n"];evalpaths=1;];
          Do[
            If[NumberQ[N1trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]],
              Do[
                idop = Opindex[px, py, pz, irrepidx,charge][[nop, irrepev]];
                If[idop != 0 && IntersectingQ[List1trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge],{idop}],
                  WriteString[ar, "OP_oneTr_p_", p[px], "_", p[py], "_", p[pz],"_Ir_", irrepidx, "_C_",p[charge],"_n_", idop,"(numerical_op+",opnumberC,");\n"];
                  MapOptoCindex[px,py,pz,irrepidx,charge,idop]=opnumberC;
                  opnumberC++;];
              , {nop, 1, Length[Opindex[px, py, pz, irrepidx,charge]]}];
            ];
            If[NumberQ[N2trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]],
              opnumberC+=N2trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]
              ];
          , {irrepev, 1, Length[bTOrthog[px, py, pz][[irrepidx]]]}];
        ];

      ,{charge,-1,1,2}];
    , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
  , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];
(**)
twotrstring[px_, py_, pz_, ir_, ev_, cg_, p1_,conj_]:=Module[{string="(*(numerical_op+",cx=px,cy=py,cz=pz},
  If[conj==-1,string="conj"<>string];
  If[NumberQ[Opindex[cx, cy, cz, ir, cg, PathUniqueIndex[p1]]],
    string=string<>ToString[FromPathtoCindex[cx,cy,cz,ir,ev,cg,p1]]<>"))";
    , string=Null];
  string];
(**)
opnumber=0;
Do[
    Do[
      Do[
        If[ListQ[Opindex[px, py, pz, irrepidx,charge]] ,
          Do[
            If[NumberQ[N1trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]],
              Do[
                idop = Opindex[px, py, pz, irrepidx,charge][[nop, irrepev]];
                If[idop != 0 && IntersectingQ[List1trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge],{idop}],
                  opnumber++;];
              , {nop, 1, Length[Opindex[px, py, pz, irrepidx,charge]]}];
            ];
            If[NumberQ[N2trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]],
              Do[
                llist=List2trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge][[listelem]];
                WriteString[ar, "*(numerical_op+",opnumber,")="];
                Do[

                  lcoeff=llist[[cgid,1]];
               
                  llpx1=llist[[cgid, 2, 1]];
                  llpy1=llist[[cgid, 2, 2]];
                  llpz1=llist[[cgid, 2, 3]];
                  ir1=llist[[cgid, 2, 4]];
                  llev1=llist[[cgid, 2, 5]];
                  charge1=llist[[cgid, 2, 6]];
                  path1=llist[[cgid, 2, 7]];
                  lconj1=llist[[cgid, 2, 8]];
               
                  llpx2=llist[[cgid, 3, 1]];
                  llpy2=llist[[cgid, 3, 2]];
                  llpz2=llist[[cgid, 3, 3]];
                  ir2=llist[[cgid, 3, 4]];
                  llev2=llist[[cgid, 3, 5]];
                  charge2=llist[[cgid, 3, 6]];
                  path2=llist[[cgid, 3, 7]];
                  lconj2=llist[[cgid, 3, 8]];

                  WriteCoefficients[lcoeff];
                  s1=twotrstring[llpx1, llpy1, llpz1, ir1, llev1, charge1, path1, lconj1];
                  s2=twotrstring[llpx2, llpy2, llpz2, ir2, llev2, charge2, path2, lconj2];
                  If[ StringQ[s1] && StringQ[s2] ,
                    WriteString[ar, OpConsts[lcoeff],"*(",s1,")*(",s2,")"];
                    ,
                    Print["Error in writing the C code, the 2tr operator cannot be anaylitically zero at this stage"];
                    Abort[];
                  ];
                ,{cgid,1,Length[llist]}];
                WriteString[ar,";\n"];
                opnumber++;
              ,{listelem,1,N2trOPtobemeasured[px,py,pz,irrepidx,irrepev,charge]}];
            ];
          , {irrepev, 1, Length[bTOrthog[px, py, pz][[irrepidx]]]}];
        ];
      ,{charge,-1,1,2}];
    , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
  , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];

WriteString[ar,"    for(int i=0;i<total_n_glue_op;i++)
        *(numerical_op_out+i)+=*(numerical_op+i);
}\n"];


  Do[
    Do[
      Do[
        opnumber=0;
        If[ListQ[Opindex[px, py, pz, irrepidx,charge]] && Union[Flatten[Opindex[px, py, pz, irrepidx,charge]]] !={0},
          WriteString[ar, "void eval_all_glueball_oneTr_ops_p_", p[px], "_", p[py], "_", p[pz],"_Ir_", irrepidx,"_C_",p[charge],"(double complex * numerical_op)\n{\n"];
          Do[
            Do[
              idop = Opindex[px, py, pz, irrepidx, charge][[nop, irrepev]];
              If[idop >0,
               WriteString[ar, "OP_oneTr_p_", p[px], "_", p[py],"_", p[pz],"_Ir_", irrepidx,"_C_",p[charge],"_n_", idop,"(numerical_op+",opnumber,");\n"];
               opnumber++;];
            , {nop, 1, Length[Opindex[px, py, pz, irrepidx,charge]]}];
          , {irrepev, 1, Length[bTOrthog[px, py, pz][[irrepidx]]]}];
         WriteString[ar, "}\n\n"];
        ];
        , {charge, -1, 1, 2}];
      , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
    , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];
  


  WriteString[ar, "
void evaluate_correlators(cor_list *lcor, int nblocking, double complex *gb_storage)
{
    int t1, t2, id, n1, n2, i;
    static double complex *gb1_bf;
    static int n_total_active_slices = 0;    
    static int *listactive = NULL;
    if (listactive == NULL)
    {
        listactive = malloc(sizeof(int) * GLB_T);
        for (i = 0; i < GLB_T; i++)
            listactive[i] = -1;

        for (i = 0; i < lcor->n_entries; i++)
        {
            listactive[lcor->list[i].t1] = 1;
            listactive[lcor->list[i].t2] = 1;
        }

        for (i = 0; i < GLB_T; i++)
            if (listactive[i] == 1)
            {
                listactive[i] = n_total_active_slices;
                n_total_active_slices++;
            }
    }


#ifdef WITH_MPI
    static int *t_to_proc = NULL;
    static int *listsent = NULL;

    if (t_to_proc == NULL)
    {
        listsent = malloc(sizeof(int) * GLB_T);

        gb1_bf = malloc(sizeof(double complex) * total_n_glue_op * nblocking * n_total_active_slices);

        t_to_proc = malloc(sizeof(int) * GLB_T);
        for (i = 0; i < GLB_T; i++)
        {
            int x[4] = {i, 0, 0, 0}, p[4];
            glb_to_proc(x, p);
            t_to_proc[i] = p[0];
        }
    }

    for (i = 0; i < GLB_T; i++)
        listsent[i] = -1;

    MPI_Status r1, r2;
#else
    gb1_bf = gb_storage;
#endif

    static double complex *gb1;
    static double complex *gb2;

    for (int icor = 0; icor < lcor->n_entries; icor++)
    {
        t1 = glbT_to_active_slices[lcor->list[icor].t1];
        t2 = glbT_to_active_slices[lcor->list[icor].t2];
        id = lcor->list[icor].id;
        gb1 = gb1_bf + total_n_glue_op * nblocking * listactive[lcor->list[icor].t1];
        gb2 = gb1_bf + total_n_glue_op * nblocking * listactive[lcor->list[icor].t2];

#ifdef WITH_MPI

        if (listsent[lcor->list[icor].t1] == -1)
        {
            if (t1 != -1)
            {
                if (PID == 0)
                {
                    memcpy(gb1, gb_storage + t1 * total_n_glue_op * nblocking, sizeof(double complex) * total_n_glue_op * nblocking);
                }
                else
                {
                    MPI_Send((double*)(gb_storage + t1 * total_n_glue_op * nblocking), total_n_glue_op * nblocking * 2, MPI_DOUBLE, 0, lcor->list[icor].t1, cart_comm);
                }
            }

            if (PID == 0 && t1 == -1)
            {
                MPI_Recv((double*)(gb1), total_n_glue_op * nblocking * 2, MPI_DOUBLE, t_to_proc[lcor->list[icor].t1], lcor->list[icor].t1, cart_comm, &r1);
            }
            listsent[lcor->list[icor].t1] = 0;
        }

      if (lcor->list[icor].t1 != lcor->list[icor].t2)
        {
            if (listsent[lcor->list[icor].t2] == -1)
            {
                if (t2 != -1)
                {
                    if (PID == 0)
                    {
                        memcpy(gb2, gb_storage + t2 * total_n_glue_op * nblocking, sizeof(double complex) * total_n_glue_op * nblocking);
                    }
                    else
                    {
                        MPI_Send((double*)(gb_storage + t2 * total_n_glue_op * nblocking), total_n_glue_op * nblocking * 2, MPI_DOUBLE, 0, GLB_T + lcor->list[icor].t2, cart_comm);
                    }
                }

                if (PID == 0 && t2 == -1)
                {
                    MPI_Recv((double*)(gb2), total_n_glue_op * nblocking * 2, MPI_DOUBLE, t_to_proc[lcor->list[icor].t2], GLB_T + lcor->list[icor].t2, cart_comm, &r2);
                }
                listsent[lcor->list[icor].t2] = 0;
            }
        }
#endif
    }
"];

stcharge[+1]="+";
stcharge[-1]="-";
startbase=0;
Do[
    Do[
      Do[
        Do[
          If[(NumberQ[N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]] && N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge] > 0 )|| NumberQ[N2trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]] ,
            cs=0;
            If[NumberQ[N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]],cs+=N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]];
            If[NumberQ[N2trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]],cs+=N2trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]];
            startbase+=cs;

          WriteString[ar, "
    lprintf(\"Measure ML\", 0, \"\\n1pt function P=(",px,",", py,",", pz,") Irrep=",IrrepName[px,py,pz][[irrepidx]]," Irrep ev=",irrepev,"/",Length[bTOrthog[px,py,pz][[irrepidx]]]," Charge=",stcharge[charge]," nop=%d\\n\",",cs," * nblocking );
    lprintf(\"Measure ML\", 0, \"Op id=",MyRangeString[startbase-cs,startbase-1]," (repeated nblocking times)\\n\");
    for (n1 = 0; n1 < GLB_T; n1++)
        if (listactive[n1] > -1)
        {
            lprintf(\"Measure ML\", 0, \" t=%d\", n1);
            for (n2 = 0; n2 < nblocking; n2++)
                for (i = ",startbase-cs,"; i < ",startbase,"; i++)
                    lprintf(\"Measure ML\", 0, \" ( %.10e %.10e )\", creal(gb1_bf[i + total_n_glue_op * (n2 + nblocking * listactive[n1])]),
                            cimag(gb1_bf[i + total_n_glue_op * (n2 + nblocking * listactive[n1])]));
            lprintf(\"Measure ML\", 0, \"\\n\");
        }
"];

          ];
        ,{irrepev, 1, Length[bTOrthog[px, py, pz][[irrepidx]]]}];
      , {charge, -1, 1, 2}];
    , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
  , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];
  WriteString[ar, "}\n"];

  WriteString[ar, "void report_op_group_setup()\n{\n"];
  Do[
    Do[
      Do[
        test = 0;
        Do[
          If[
            NumberQ[N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]] && N1trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge] > 0,
            test = 1;
          ];
          If[
            NumberQ[N2trOPtobemeasured[px, py, pz, irrepidx, irrepev, charge]] ,
            test = 1;
          ];
        , {irrepev, 1, Length[bTOrthog[px, py, pz][[irrepidx]]]}];
        If[test == 1, 
          WriteString[ar, "lprintf(\"INIT Measure ML\",0,\"\\n1pt Irrep multiplets Total P=(", px, ",", py, ",", pz, ") Irrep=", IrrepName[px,py,pz][[irrepidx]]," Charge=", stcharge[charge], "\");\n"];
          WriteString[ar, "lprintf(\"INIT Measure ML\",0,\" " <> OpGroupStringPaths[px, py, pz, irrepidx, charge] <>"\");\n"]
        ];
      , {charge, -1, 1, 2}];
    , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
  , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];
              WriteString[ar, "}\n"];


  Close[ar];

  OneTraceOpGenerateCheader[];
  ]


  OneTraceOpGenerateCcode[px_, py_, pz_, irrepidx_,charge_] := OneTraceOpGenerateCcode[px, py, pz, irrepidx,charge] = Module[{op,oplist},
  Do[
    op=OpList[px, py, pz, irrepidx, charge, opidx];
    If[FreeQ[op, Pre] && FreeQ[op, Pim]  , Print["The request operator index has not yet been evaluated"];Abort[]];
    If[SameQ[Head[op],Plus],oplist=op//. Plus->List;,oplist={op}];
    coeff=oplist//.{Pre[__][__]-> 1, Pim[__][__]-> 1};
    paths=oplist//.{A_. Pre[b__][nx_,ny_,nz_] :> {P[b],Exp[-I 2 Pi /L (px nx+py ny +pz nz)],0}, A_. Pim[b__][nx_,ny_,nz_] :> {P[b],Exp[-I 2 Pi /L (px nx+py ny +pz nz)],1}};
    If[Not[AllTrue[paths[[All,1]], Not[FreeQ[#, P[__]]] &]],Print["1 The request operator has a non P based structure:",op];Abort[]];
    If[Not[AllTrue[coeff, NumberQ[N[#]] &]],Print["2 The request operator has a non P based structure:",op];Abort[]];
    If[Length[coeff]!=Length[paths],Print["3 The request operator has a non P based structure:",op];Abort[]];
  (**)
  (**)
    Do[
      PathGenerateCcode[PathUniqueIndex[paths[[i,1]]]];
    ,{i,1,Length[paths]}];
  (**)
  (**)
    Do[
      WriteCoefficients[coeff[[i]]];
     ,{i,1,Length[coeff]}];
   (**)

    shifts=Complement[Union[paths[[All,2]]],{1}];
    Do[WriteShift[shifts[[i]]],{i,1,Length[shifts]}];


    ar = OpenAppend[opfilename, FormatType -> InputForm];
    WriteString[ar, "static void OP_oneTr_p_",p[px],"_",p[py],"_",p[pz],"_Ir_",irrepidx,"_C_",p[charge],"_n_",opidx,"(double complex * op_out)\n"];
    WriteString[ar,"{\n*op_out ="];
    Do[
      WriteString[ar,OpConsts[coeff[[i]]]];
      If[Abs[coeff[[i]]]!=1,WriteString[ar,"*"]];
      If[Not[SameQ[paths[[i,2]],1]],WriteString[ar,MapShifts[paths[[i,2]]],"*"]];
      If[paths[[i,3]]==0,WriteString[ar,"mom_def_Re_tr_paths["],WriteString[ar,"mom_def_Im_tr_paths["]];
      WriteString[ar,PathUniqueIndex[paths[[i,1]]],"]"];
    ,{i,1,Length[paths]}];
    WriteString[ar,";\n}\n\n"];
     Close[ar];
  ,{opidx,1,Max[Opindex[px, py, pz, irrepidx,charge]]}];
  (*OneTraceOpGenerateCheader[];*)
  ]
  
  
  stringshift="";

  WriteShift[shift_]:=Module[{cc=shift},
    If[Not[StringQ[MapShifts[cc]]],
      MapShifts[cc]="c"<>ToString[OpConstidx];
      ar = OpenAppend[opfilename, FormatType -> InputForm];
      WriteString[ar,"static double complex c",OpConstidx,";\n"];
      stringshift=stringshift<>"c"<>ToString[OpConstidx]<>"=cexp(I*PI*("<>MyCForm[N[PowerExpand[Log[cc]] L/(I Pi),18]]<>"/GLB_X));\n";
      OpConstidx++;
      Close[ar];
    ];
  ];

  sign[a_]:=Module[{res},If[a>0,res="+",res="-"];res];
  
  WriteCoefficients[coef_]:=WriteCoefficients[coef]=Module[{cc=ExpandAll[coef],string=""},    
    If[Not[StringQ[OpConsts[cc]]],
      If[Abs[cc]!=1,
        If[Re[cc]!=0,string=ToString[CForm[N[Re[cc], 18]]]];
        If[Im[cc]!=0,string=string<>sign[Im[cc]]<>"I*"<>ToString[CForm[N[Abs[Im[cc]], 18]]]];
        OpConsts[cc]="+("<>string<>")";,
        OpConsts[cc]=sign[cc];
      ];
    ];
  ];

  OneTraceOpGenerateCheader[] := Module[{res},
    ar = OpenWrite[headerfilename, FormatType -> InputForm];
    WriteString[ar, "#ifndef GLUEBALLS_H
#define GLUEBALLS_H
#include \"hr_complex.h\"
#include \"logger.h\"

int **direct_spatial_rotations();
int **inverse_spatial_rotations();
void request_spatial_paths_evaluation();
/*void eval_time_momentum_glueball_paths(int t, int px, int py, int pz);*/
void eval_all_glueball_ops(int t, double complex *numerical_op);
void measure_1pt_glueballs(int nblocking, double *smear_val, double complex *gb_storage);
void report_op_group_setup();

typedef struct
{
    int t1;
    int t2;
    int id;
    int n_pairs;
} cor_points;

typedef struct
{
    int n_entries;
    cor_points *list;
    int n_corrs;
} cor_list;

void evaluate_correlators(cor_list *lcor, int nblocking, double complex *gb_storage);
    "];
    WriteString[ar, "\n\n"];
    Do[
      Do[
        WriteString[ar, "#define dim_p_", p[px], "_", p[py],"_", p[pz], "_Ir_", irrepidx," ",Length[bTOrthog[px, py, pz][[irrepidx]]],"\n"];
        Do[
        WriteString[ar, "#define n_OP_oneTr_p_", p[px], "_", p[py],"_", p[pz], "_Ir_", irrepidx,"_C_",p[charge]," "];
        If[ListQ[Opindex[px, py, pz, irrepidx,charge]],
          WriteString[ar,Max[Opindex[px, py, pz, irrepidx,charge]],"\n"];
          WriteString[ar, "void OP_oneTr_p_", p[px], "_", p[py],"_", p[pz], "_Ir_", irrepidx, "_C_",p[charge],"(double complex * numop);\n"];
          ,WriteString[ar, "0\n"];
        ];
      ,{charge,-1,1,2}];
      , {irrepidx, 1, Length[bTOrthog[px, py, pz]]}];
    , {px, -1, 1}, {py, -1, 1}, {pz, -1, 1}];
    WriteString[ar, "#define total_n_glue_op ",opnumberC,"\n"];
    WriteString[ar,"#endif\n"];
    Close[ar];
    ];


    EndPackage[];
